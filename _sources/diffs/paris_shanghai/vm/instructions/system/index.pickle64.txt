gASVpwIBAAAAAACMDmRvY3V0aWxzLm5vZGVzlIwIZG9jdW1lbnSUk5QpgZR9lCiMCXJhd3NvdXJjZZSMAJSMCGNoaWxkcmVulF2UKGgAjAZ0YXJnZXSUk5QpgZR9lChoBWgGaAddlIwKYXR0cmlidXRlc5R9lCiMA2lkc5RdlIwsbW9kdWxlLWV0aGVyZXVtLnBhcmlzLnZtLmluc3RydWN0aW9ucy5zeXN0ZW2UYYwHY2xhc3Nlc5RdlIwFbmFtZXOUXZSMCGR1cG5hbWVzlF2UjAhiYWNrcmVmc5RdlIwFaXNtb2SUiHWMB3RhZ25hbWWUaAmMBnNvdXJjZZSMbS9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vcGFyaXMvdm0vaW5zdHJ1Y3Rpb25zL3N5c3RlbS9pbmRleC5yc3SUjARsaW5llEsBjAZwYXJlbnSUaAOMCV9kb2N1bWVudJRoA3VijA9zcGhpbnguYWRkbm9kZXOUjAVpbmRleJSTlCmBlH2UKGgFaAZoB12UaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwHZW50cmllc5RdlCiMBHBhaXKUjC1tb2R1bGU7IGV0aGVyZXVtLnBhcmlzLnZtLmluc3RydWN0aW9ucy5zeXN0ZW2UaBJoBk50lGF1aBxoI2gdaB5oH0sCaCBoA2ghaAN1YmgAjAdzZWN0aW9ulJOUKYGUfZQoaAVoBmgHXZQoaACMBXRpdGxllJOUKYGUfZQoaAWMMkV0aGVyZXVtIFZpcnR1YWwgTWFjaGluZSAoRVZNKSBTeXN0ZW0gSW5zdHJ1Y3Rpb25zlGgHXZRoAIwEVGV4dJSTlIwyRXRoZXJldW0gVmlydHVhbCBNYWNoaW5lIChFVk0pIFN5c3RlbSBJbnN0cnVjdGlvbnOUhZSBlH2UKGgFaAZoIGg6aCFoA2gdjFwvaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzLy50b3gvZG9jcy9zdGFnZTBfb3V0L2F1dG9hcGkvID0+IGRvYy9kaWZmc5RoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGg4aB1oHmgfSwRo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dC5hdXRvc3VtbWFyeZSMEWF1dG9zdW1tYXJ5X3RhYmxllJOUKYGUfZQoaAVYjQIAAAoKCgpnZW5lcmljX2NyZWF0ZQoKQ29yZSBsb2dpYyB1c2VkIGJ5IHRoZSBDUkVBVEUqIGZhbWlseSBvZiBvcGNvZGVzLgoKY3JlYXRlCgpDcmVhdGVzIGEgbmV3IGFjY291bnQgd2l0aCBhc3NvY2lhdGVkIGNvZGUuCgpjcmVhdGUyCgpDcmVhdGVzIGEgbmV3IGFjY291bnQgd2l0aCBhc3NvY2lhdGVkIGNvZGUuCgpyZXR1cm5fCgpIYWx0cyBleGVjdXRpb24gcmV0dXJuaW5nIG91dHB1dCBkYXRhLgoKZ2VuZXJpY19jYWxsCgpQZXJmb3JtIHRoZSBjb3JlIGxvZ2ljIG9mIHRoZSBDQUxMKiBmYW1pbHkgb2Ygb3Bjb2Rlcy4KCmNhbGwKCk1lc3NhZ2UtY2FsbCBpbnRvIGFuIGFjY291bnQuCgpjYWxsY29kZQoKTWVzc2FnZS1jYWxsIGludG8gdGhpcyBhY2NvdW50IHdpdGggYWx0ZXJuYXRpdmUgYWNjb3VudOKAmXMgY29kZS4KCnNlbGZkZXN0cnVjdAoKSGFsdCBleGVjdXRpb24gYW5kIHJlZ2lzdGVyIGFjY291bnQgZm9yIGxhdGVyIGRlbGV0aW9uLgoKZGVsZWdhdGVjYWxsCgpNZXNzYWdlLWNhbGwgaW50byBhbiBhY2NvdW50LgoKc3RhdGljY2FsbAoKTWVzc2FnZS1jYWxsIGludG8gYW4gYWNjb3VudC4KCnJldmVydAoKU3RvcCBleGVjdXRpb24gYW5kIHJldmVydCBzdGF0ZSBjaGFuZ2VzLCB3aXRob3V0IGNvbnN1bWluZyBhbGwgcHJvdmlkZWQgZ2FzlGgHXZRoAIwFdGFibGWUk5QpgZR9lChoBWgGaAddlGgAjAZ0Z3JvdXCUk5QpgZR9lChoBWgGaAddlChoAIwHY29sc3BlY5STlCmBlH2UKGgFaAZoB12UaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwIY29sd2lkdGiUSwp1aBxq/QIAAGgdTmgfTmggavoCAAB1Ymr+AgAAKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAhjb2x3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bGNvZGWUhZSBlH2UKGgFaAZoIGo+BQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlChqNQMAAIwCcHmUjAZweS1vYmqUZWgVXZRoF12UaBldlHVoHGopAwAAaB1OaB9OaCBqOwUAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMCGludGVybmFslIiMBXJlZmlklIwuZXRoZXJldW0ucGFyaXMudm0uaW5zdHJ1Y3Rpb25zLnN5c3RlbS5jYWxsY29kZZSMCHJlZnRpdGxllIwuZXRoZXJldW0ucGFyaXMudm0uaW5zdHJ1Y3Rpb25zLnN5c3RlbS5jYWxsY29kZZR1aBxobWgdTmgfTmggajcFAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHYx+L2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9wYXJpcy92bS9pbnN0cnVjdGlvbnMvc3lzdGVtL2luZGV4LnJzdDo0MTo8YXV0b3N1bW1hcnk+lGgfSwFoIGo0BQAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGodAwAAaB1OaB9OaCBqMQUAAHViah4DAAApgZR9lChoBWgGaAddlGhpKYGUfZQoaAWMQU1lc3NhZ2UtY2FsbCBpbnRvIHRoaXMgYWNjb3VudCB3aXRoIGFsdGVybmF0aXZlIGFjY291bnTigJlzIGNvZGUulGgHXZRoP4xBTWVzc2FnZS1jYWxsIGludG8gdGhpcyBhY2NvdW50IHdpdGggYWx0ZXJuYXRpdmUgYWNjb3VudOKAmXMgY29kZS6UhZSBlH2UKGgFaAZoIGpoBQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB2Mfi9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vcGFyaXMvdm0vaW5zdHJ1Y3Rpb25zL3N5c3RlbS9pbmRleC5yc3Q6NDE6PGF1dG9zdW1tYXJ5PpRoH0sBaCBqZQUAAHViYWgOfZQoaBBdlGgTXZRo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LAogICAgbWVtb3J5X3NpemU6IFUyNTYsCikgLT4gTm9uZToKICAgICMgVGhpcyBpbXBvcnQgY2F1c2VzIGEgY2lyY3VsYXIgaW1wb3J0IGVycm9yCiAgICAjIGlmIGl0J3Mgbm90IG1vdmVkIGluc2lkZSB0aGlzIG1ldGhvZAogICAgZnJvbSAuLi52bS5pbnRlcnByZXRlciBpbXBvcnQgU1RBQ0tfREVQVEhfTElNSVQsIHByb2Nlc3NfY3JlYXRlX21lc3NhZ2UKCiAgICBldm0uYWNjZXNzZWRfYWRkcmVzc2VzLmFkZChjb250cmFjdF9hZGRyZXNzKQoKICAgIGNyZWF0ZV9tZXNzYWdlX2dhcyA9IG1heF9tZXNzYWdlX2NhbGxfZ2FzKFVpbnQoZXZtLmdhc19sZWZ0KSkKICAgIGV2bS5nYXNfbGVmdCAtPSBjcmVhdGVfbWVzc2FnZV9nYXMKCiAgICBlbnN1cmUobm90IGV2bS5tZXNzYWdlLmlzX3N0YXRpYywgV3JpdGVJblN0YXRpY0NvbnRleHQpCiAgICBldm0ucmV0dXJuX2RhdGEgPSBiIiIKCiAgICBzZW5kZXJfYWRkcmVzcyA9IGV2bS5tZXNzYWdlLmN1cnJlbnRfdGFyZ2V0CiAgICBzZW5kZXIgPSBnZXRfYWNjb3VudChldm0uZW52LnN0YXRlLCBzZW5kZXJfYWRkcmVzcykKCiAgICBpZiAoCiAgICAgICAgc2VuZGVyLmJhbGFuY2UgPCBlbmRvd21lbnQKICAgICAgICBvciBzZW5kZXIubm9uY2UgPT0gVWludCgyKio2NCAtIDEpCiAgICAgICAgb3IgZXZtLm1lc3NhZ2UuZGVwdGggKyAxID4gU1RBQ0tfREVQVEhfTElNSVQKICAgICk6CiAgICAgICAgZXZtLmdhc19sZWZ0ICs9IGNyZWF0ZV9tZXNzYWdlX2dhcwogICAgICAgIHB1c2goZXZtLnN0YWNrLCBVMjU2KDApKQogICAgICAgIHJldHVybgoKICAgIGlmIGFjY291bnRfaGFzX2NvZGVfb3Jfbm9uY2UoZXZtLmVudi5zdGF0ZSwgY29udHJhY3RfYWRkcmVzcyk6CiAgICAgICAgaW5jcmVtZW50X25vbmNlKGV2bS5lbnYuc3RhdGUsIGV2bS5tZXNzYWdlLmN1cnJlbnRfdGFyZ2V0KQogICAgICAgIHB1c2goZXZtLnN0YWNrLCBVMjU2KDApKQogICAgICAgIHJldHVybgoKICAgIGNhbGxfZGF0YSA9IG1lbW9yeV9yZWFkX2J5dGVzKAogICAgICAgIGV2bS5tZW1vcnksIG1lbW9yeV9zdGFydF9wb3NpdGlvbiwgbWVtb3J5X3NpemUKICAgICkKCiAgICBpbmNyZW1lbnRfbm9uY2UoZXZtLmVudi5zdGF0ZSwgZXZtLm1lc3NhZ2UuY3VycmVudF90YXJnZXQpCgogICAgY2hpbGRfbWVzc2FnZSA9IE1lc3NhZ2UoCiAgICAgICAgY2FsbGVyPWV2bS5tZXNzYWdlLmN1cnJlbnRfdGFyZ2V0LAogICAgICAgIHRhcmdldD1CeXRlczAoKSwKICAgICAgICBnYXM9Y3JlYXRlX21lc3NhZ2VfZ2FzLAogICAgICAgIHZhbHVlPWVuZG93bWVudCwKICAgICAgICBkYXRhPWIiIiwKICAgICAgICBjb2RlPWNhbGxfZGF0YSwKICAgICAgICBjdXJyZW50X3RhcmdldD1jb250cmFjdF9hZGRyZXNzLAogICAgICAgIGRlcHRoPWV2bS5tZXNzYWdlLmRlcHRoICsgMSwKICAgICAgICBjb2RlX2FkZHJlc3M9Tm9uZSwKICAgICAgICBzaG91bGRfdHJhbnNmZXJfdmFsdWU9VHJ1ZSwKICAgICAgICBpc19zdGF0aWM9RmFsc2UsCiAgICAgICAgYWNjZXNzZWRfYWRkcmVzc2VzPWV2bS5hY2Nlc3NlZF9hZGRyZXNzZXMuY29weSgpLAogICAgICAgIGFjY2Vzc2VkX3N0b3JhZ2Vfa2V5cz1ldm0uYWNjZXNzZWRfc3RvcmFnZV9rZXlzLmNvcHkoKSwKICAgICAgICBwYXJlbnRfZXZtPWV2bSwKICAgICkKICAgIGNoaWxkX2V2bSA9IHByb2Nlc3NfY3JlYXRlX21lc3NhZ2UoY2hpbGRfbWVzc2FnZSwgZXZtLmVudikKCiAgICBpZiBjaGlsZF9ldm0uZXJyb3I6CiAgICAgICAgaW5jb3Jwb3JhdGVfY2hpbGRfb25fZXJyb3IoZXZtLCBjaGlsZF9ldm0pCiAgICAgICAgZXZtLnJldHVybl9kYXRhID0gY2hpbGRfZXZtLm91dHB1dAogICAgICAgIHB1c2goZXZtLnN0YWNrLCBVMjU2KDApKQogICAgZWxzZToKICAgICAgICBpbmNvcnBvcmF0ZV9jaGlsZF9vbl9zdWNjZXNzKGV2bSwgY2hpbGRfZXZtKQogICAgICAgIGV2bS5yZXR1cm5fZGF0YSA9IGIiIgogICAgICAgIHB1c2goZXZtLnN0YWNrLCBVMjU2LmZyb21fYmVfYnl0ZXMoY2hpbGRfZXZtLm1lc3NhZ2UuY3VycmVudF90YXJnZXQpKQqUaAddlChoP4yOZGVmIGdlbmVyaWNfY3JlYXRlKAogICAgZXZtOiBFdm0sCiAgICBlbmRvd21lbnQ6IFUyNTYsCiAgICBjb250cmFjdF9hZGRyZXNzOiBBZGRyZXNzLAogICAgbWVtb3J5X3N0YXJ0X3Bvc2l0aW9uOiBVMjU2LAogICAgbWVtb3J5X3NpemU6IFUyNTYsCpSFlIGUfZQoaAVoBmggaisIAABoIWgDaB1oRGgfSwB1YmpNBwAAKYGUfZQoaAVoBmgHXZRoP4wVaW5pdF9jb2RlX2dhczogVWludCwKlIWUgZR9lChoBWgGaCBqMwgAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZSMDGNoYW5nZS1hZGRlZJRhaBVdlGgXXZRoGV2UdWgcakwHAABoIGorCAAAaCFoA2gdaERoH0sAdWJoP4yJKSAtPiBOb25lOgogICAgIyBUaGlzIGltcG9ydCBjYXVzZXMgYSBjaXJjdWxhciBpbXBvcnQgZXJyb3IKICAgICMgaWYgaXQncyBub3QgbW92ZWQgaW5zaWRlIHRoaXMgbWV0aG9kCiAgICBmcm9tIC4uLnZtLmludGVycHJldGVyIGltcG9ydCCUhZSBlH2UKGgFaAZoIGorCAAAaCFoA2gdaERoH0sAdWJqTQcAACmBlH2UKGgFaAZoB12UaD+MISgKICAgICAgICBNQVhfQ09ERV9TSVpFLAogICAgICAgIJSFlIGUfZQoaAVoBmggakUIAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UjAxjaGFuZ2UtYWRkZWSUYWgVXZRoF12UaBldlHVoHGpMBwAAaCBqKwgAAGghaANoHWhEaB9LAHViaD+ME1NUQUNLX0RFUFRIX0xJTUlULCCUhZSBlH2UKGgFaAZoIGorCAAAaCFoA2gdaERoH0sAdWJqTQcAACmBlH2UKGgFaAZoB12UaD+MFnByb2Nlc3NfY3JlYXRlX21lc3NhZ2WUhZSBlH2UKGgFaAZoIGpXCAAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlIwPY2hhbmdlLXJlcGxhY2VklGFoFV2UaBddlGgZXZR1aBxqTAcAAGggaisIAABoIWgDaB1oRGgfSwB1YmpNBwAAKYGUfZQoaAVoBmgHXZRoP4wdcHJvY2Vzc19jcmVhdGVfbWVzc2FnZSwKICAgICmUhZSBlH2UKGgFaAZoIGplCAAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlIwSY2hhbmdlLXJlcGxhY2VtZW50lGFoFV2UaBddlGgZXZR1aBxqTAcAAGggaisIAABoIWgDaB1oRGgfSwB1Ymg/WGMDAAAKCiAgICBldm0uYWNjZXNzZWRfYWRkcmVzc2VzLmFkZChjb250cmFjdF9hZGRyZXNzKQoKICAgIGNyZWF0ZV9tZXNzYWdlX2dhcyA9IG1heF9tZXNzYWdlX2NhbGxfZ2FzKFVpbnQoZXZtLmdhc19sZWZ0KSkKICAgIGV2bS5nYXNfbGVmdCAtPSBjcmVhdGVfbWVzc2FnZV9nYXMKCiAgICBlbnN1cmUobm90IGV2bS5tZXNzYWdlLmlzX3N0YXRpYywgV3JpdGVJblN0YXRpY0NvbnRleHQpCiAgICBldm0ucmV0dXJuX2RhdGEgPSBiIiIKCiAgICBzZW5kZXJfYWRkcmVzcyA9IGV2bS5tZXNzYWdlLmN1cnJlbnRfdGFyZ2V0CiAgICBzZW5kZXIgPSBnZXRfYWNjb3VudChldm0uZW52LnN0YXRlLCBzZW5kZXJfYWRkcmVzcykKCiAgICBpZiAoCiAgICAgICAgc2VuZGVyLmJhbGFuY2UgPCBlbmRvd21lbnQKICAgICAgICBvciBzZW5kZXIubm9uY2UgPT0gVWludCgyKio2NCAtIDEpCiAgICAgICAgb3IgZXZtLm1lc3NhZ2UuZGVwdGggKyAxID4gU1RBQ0tfREVQVEhfTElNSVQKICAgICk6CiAgICAgICAgZXZtLmdhc19sZWZ0ICs9IGNyZWF0ZV9tZXNzYWdlX2dhcwogICAgICAgIHB1c2goZXZtLnN0YWNrLCBVMjU2KDApKQogICAgICAgIHJldHVybgoKICAgIGlmIGFjY291bnRfaGFzX2NvZGVfb3Jfbm9uY2UoZXZtLmVudi5zdGF0ZSwgY29udHJhY3RfYWRkcmVzcyk6CiAgICAgICAgaW5jcmVtZW50X25vbmNlKGV2bS5lbnYuc3RhdGUsIGV2bS5tZXNzYWdlLmN1cnJlbnRfdGFyZ2V0KQogICAgICAgIHB1c2goZXZtLnN0YWNrLCBVMjU2KDApKQogICAgICAgIHJldHVybgoKICAgIGNhbGxfZGF0YSA9IG1lbW9yeV9yZWFkX2J5dGVzKAogICAgICAgIGV2bS5tZW1vcnksIG1lbW9yeV9zdGFydF9wb3NpdGlvbiwgbWVtb3J5X3NpemUKICAgICmUhZSBlH2UKGgFaAZoIGorCAAAaCFoA2gdaERoH0sAdWJqTQcAACmBlH2UKGgFaAZoB12UaD+MQAoKICAgIGVuc3VyZShsZW4oY2FsbF9kYXRhKSA8PSAyICogTUFYX0NPREVfU0laRSwgT3V0T2ZHYXNFcnJvcimUhZSBlH2UKGgFaAZoIGp3CAAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlIwMY2hhbmdlLWFkZGVklGFoFV2UaBddlGgZXZR1aBxqTAcAAGggaisIAABoIWgDaB1oRGgfSwB1Ymg/WMYDAAAKCiAgICBpbmNyZW1lbnRfbm9uY2UoZXZtLmVudi5zdGF0ZSwgZXZtLm1lc3NhZ2UuY3VycmVudF90YXJnZXQpCgogICAgY2hpbGRfbWVzc2FnZSA9IE1lc3NhZ2UoCiAgICAgICAgY2FsbGVyPWV2bS5tZXNzYWdlLmN1cnJlbnRfdGFyZ2V0LAogICAgICAgIHRhcmdldD1CeXRlczAoKSwKICAgICAgICBnYXM9Y3JlYXRlX21lc3NhZ2VfZ2FzLAogICAgICAgIHZhbHVlPWVuZG93bWVudCwKICAgICAgICBkYXRhPWIiIiwKICAgICAgICBjb2RlPWNhbGxfZGF0YSwKICAgICAgICBjdXJyZW50X3RhcmdldD1jb250cmFjdF9hZGRyZXNzLAogICAgICAgIGRlcHRoPWV2bS5tZXNzYWdlLmRlcHRoICsgMSwKICAgICAgICBjb2RlX2FkZHJlc3M9Tm9uZSwKICAgICAgICBzaG91bGRfdHJhbnNmZXJfdmFsdWU9VHJ1ZSwKICAgICAgICBpc19zdGF0aWM9RmFsc2UsCiAgICAgICAgYWNjZXNzZWRfYWRkcmVzc2VzPWV2bS5hY2Nlc3NlZF9hZGRyZXNzZXMuY29weSgpLAogICAgICAgIGFjY2Vzc2VkX3N0b3JhZ2Vfa2V5cz1ldm0uYWNjZXNzZWRfc3RvcmFnZV9rZXlzLmNvcHkoKSwKICAgICAgICBwYXJlbnRfZXZtPWV2bSwKICAgICkKICAgIGNoaWxkX2V2bSA9IHByb2Nlc3NfY3JlYXRlX21lc3NhZ2UoY2hpbGRfbWVzc2FnZSwgZXZtLmVudikKCiAgICBpZiBjaGlsZF9ldm0uZXJyb3I6CiAgICAgICAgaW5jb3Jwb3JhdGVfY2hpbGRfb25fZXJyb3IoZXZtLCBjaGlsZF9ldm0pCiAgICAgICAgZXZtLnJldHVybl9kYXRhID0gY2hpbGRfZXZtLm91dHB1dAogICAgICAgIHB1c2goZXZtLnN0YWNrLCBVMjU2KDApKQogICAgZWxzZToKICAgICAgICBpbmNvcnBvcmF0ZV9jaGlsZF9vbl9zdWNjZXNzKGV2bSwgY2hpbGRfZXZtKQogICAgICAgIGV2bS5yZXR1cm5fZGF0YSA9IGIiIgogICAgICAgIHB1c2goZXZtLnN0YWNrLCBVMjU2LmZyb21fYmVfYnl0ZXMoY2hpbGRfZXZtLm1lc3NhZ2UuY3VycmVudF90YXJnZXQpKQqUhZSBlH2UKGgFaAZoIGorCAAAaCFoA2gdaERoH0sAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwGc291cmNllIxeL2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9zcmMvZXRoZXJldW0vcGFyaXMvdm0vaW5zdHJ1Y3Rpb25zL3N5c3RlbS5weZSMCXhtbDpzcGFjZZRqtAIAAIwFZm9yY2WUiYwIbGFuZ3VhZ2WUjAZweXRob26UjA5oaWdobGlnaHRfYXJnc5R9lIwLbGluZW5vc3RhcnSUSwFzjAdsaW5lbm9z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IHNhbHQgPSBwb3AoZXZtLnN0YWNrKS50b19iZV9ieXRlczMyKCkKCiAgICAjIEdBUwogICAgZXh0ZW5kX21lbW9yeSA9IGNhbGN1bGF0ZV9nYXNfZXh0ZW5kX21lbW9yeSgKICAgICAgICBldm0ubWVtb3J5LCBbKG1lbW9yeV9zdGFydF9wb3NpdGlvbiwgbWVtb3J5X3NpemUpXQogICAgKQogICAgY2FsbF9kYXRhX3dvcmRzID0gY2VpbDMyKFVpbnQobWVtb3J5X3NpemUpKSAvLyAzMgogICAgY2hhcmdlX2dhcygKICAgICAgICBldm0sCiAgICAgICAgR0FTX0NSRUFURSArIEdBU19LRUNDQUsyNTZfV09SRCAqIGNhbGxfZGF0YV93b3JkcyArIGV4dGVuZF9tZW1vcnkuY29zdCwKICAgICkKCiAgICAjIE9QRVJBVElPTgogICAgZXZtLm1lbW9yeSArPSBiIlx4MDAiICogZXh0ZW5kX21lbW9yeS5leHBhbmRfYnkKICAgIGNvbnRyYWN0X2FkZHJlc3MgPSBjb21wdXRlX2NyZWF0ZTJfY29udHJhY3RfYWRkcmVzcygKICAgICAgICBldm0ubWVzc2FnZS5jdXJyZW50X3RhcmdldCwKICAgICAgICBzYWx0LAogICAgICAgIG1lbW9yeV9yZWFkX2J5dGVzKGV2bS5tZW1vcnksIG1lbW9yeV9zdGFydF9wb3NpdGlvbiwgbWVtb3J5X3NpemUpLAogICAgKQoKICAgIGdlbmVyaWNfY3JlYXRlKAogICAgICAgIGV2bSwgZW5kb3dtZW50LCBjb250cmFjdF9hZGRyZXNzLCBtZW1vcnlfc3RhcnRfcG9zaXRpb24sIG1lbW9yeV9zaXplCiAgICApCgogICAgIyBQUk9HUkFNIENPVU5URVIKICAgIGV2bS5wYyArPSAxCpRoB12UKGg/WHcBAABkZWYgY3JlYXRlMihldm06IEV2bSkgLT4gTm9uZToKICAgICMgU1RBQ0sKICAgIGVuZG93bWVudCA9IHBvcChldm0uc3RhY2spCiAgICBtZW1vcnlfc3RhcnRfcG9zaXRpb24gPSBwb3AoZXZtLnN0YWNrKQogICAgbWVtb3J5X3NpemUgPSBwb3AoZXZtLnN0YWNrKQogICAg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ICAgIHBhc3MKlGgHXZRoP1gHAgAAZGVmIHJldHVybl8oZXZtOiBFdm0pIC0+IE5vbmU6CiAgICAjIFNUQUNLCiAgICBtZW1vcnlfc3RhcnRfcG9zaXRpb24gPSBwb3AoZXZtLnN0YWNrKQogICAgbWVtb3J5X3NpemUgPSBwb3AoZXZtLnN0YWNrKQoKICAgICMgR0FTCiAgICBleHRlbmRfbWVtb3J5ID0gY2FsY3VsYXRlX2dhc19leHRlbmRfbWVtb3J5KAogICAgICAgIGV2bS5tZW1vcnksIFsobWVtb3J5X3N0YXJ0X3Bvc2l0aW9uLCBtZW1vcnlfc2l6ZSldCiAgICApCgogICAgY2hhcmdlX2dhcyhldm0sIEdBU19aRVJPICsgZXh0ZW5kX21lbW9yeS5jb3N0KQoKICAgICMgT1BFUkFUSU9OCiAgICBldm0ubWVtb3J5ICs9IGIiXHgwMCIgKiBleHRlbmRfbWVtb3J5LmV4cGFuZF9ieQogICAgZXZtLm91dHB1dCA9IG1lbW9yeV9yZWFkX2J5dGVzKAogICAgICAgIGV2bS5tZW1vcnksIG1lbW9yeV9zdGFydF9wb3NpdGlvbiwgbWVtb3J5X3NpemUKICAgICkKCiAgICBldm0ucnVubmluZyA9IEZhbHNlCgogICAgIyBQUk9HUkFNIENPVU5URVIKICAgIHBhc3MKlIWUgZR9lChoBWgGaCBqAwwAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMBnNvdXJjZZSMXi9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3Mvc3JjL2V0aGVyZXVtL3BhcmlzL3ZtL2luc3RydWN0aW9ucy9zeXN0ZW0ucHmUjAl4bWw6c3BhY2WUarQCAACMBWZvcmNllImMCGxhbmd1YWdllIwGcHl0aG9ulIwOaGlnaGxpZ2h0X2FyZ3OUfZRqlwgAAEsBc4wHbGluZW5vc5SJdWgcaikIAABoHWgeaB9LcmggaiwLAAB1YmVoDn2UKGgQXZRqcgEAAGFoE12UaBVdlIwGcmV0dXJulGFoF12UaBldlHVoHGgzaB1oHmgfS2VoIGrzBgAAaCFoA3ViaDQpgZR9lChoBWgGaAddlChoOSmBlH2UKGgFjAxnZW5lcmljX2NhbGyUaAddlGg/jAxnZW5lcmljX2NhbGyUhZSBlH2UKGgFaAZoIGokDAAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGg4aB1oHmgfS3doIGohDAAAdWJoJCmBlH2UKGgFaAZoB12UaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwHZW50cmllc5RdlHVoHGgjaB1oHmgfTmggaiEMAAB1YmohBwAAKYGUfZQoaAVoBmgHXZQoaiYHAAApgZR9lChoBYy/Z2VuZXJpY19jYWxsKGV2bSwgZ2FzLCB2YWx1ZSwgY2FsbGVyLCB0bywgY29kZV9hZGRyZXNzLCBzaG91bGRfdHJhbnNmZXJfdmFsdWUsIGlzX3N0YXRpY2NhbGwsIG1lbW9yeV9pbnB1dF9zdGFydF9wb3NpdGlvbiwgbWVtb3J5X2lucHV0X3NpemUsIG1lbW9yeV9vdXRwdXRfc3RhcnRfcG9zaXRpb24sIG1lbW9yeV9vdXRwdXRfc2l6ZSmUaAddlChqLAcAACmBlH2UKGgFjAxnZW5lcmljX2NhbGyUaAddlGg/jAxnZW5lcmljX2NhbGyUhZSBlH2UKGgFaAZoIGpEDAAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlChqOAcAAGo5BwAAajoHAABqOwcAAGVoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRqtAIAAHVoHGorBwAAaB1oHmgfTmggakAMAAB1YmpBBwAAKYGUfZQoaAWMsWV2bSwgZ2FzLCB2YWx1ZSwgY2FsbGVyLCB0bywgY29kZV9hZGRyZXNzLCBzaG91bGRfdHJhbnNmZXJfdmFsdWUsIGlzX3N0YXRpY2NhbGwsIG1lbW9yeV9pbnB1dF9zdGFydF9wb3NpdGlvbiwgbWVtb3J5X2lucHV0X3NpemUsIG1lbW9yeV9vdXRwdXRfc3RhcnRfcG9zaXRpb24sIG1lbW9yeV9vdXRwdXRfc2l6ZZRoB12UKGpHBwAAKYGUfZQoaAWMA2V2bZRoB12Uak0HAAApgZR9lChoBWgGaAddlGg/jANldm2UhZSBlH2UKGgFaAZoIGpbDAAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGpYBwAAYWgVXZRoF12UaBldlHVoHGpMBwAAaB1OaB9OaCBqVwwAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRqtAIAAHVoHGpGBwAAaB1OaB9OaCBqUwwAAHViakcHAAApgZR9lChoBYwDZ2FzlGgHXZRqTQcAACmBlH2UKGgFaAZoB12UaD+MA2dhc5SFlIGUfZQoaAVoBmgganMMAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UalgHAABhaBVdlGgXXZRoGV2UdWgcakwHAABoHU5oH05oIGpvDAAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwJeG1sOnNwYWNllGq0AgAAdWgcakYHAABoHU5oH05oIGpTDAAAdWJqRwcAACmBlH2UKGgFjAV2YWx1ZZRoB12Uak0HAAApgZR9lChoBWgGaAddlGg/jAV2YWx1ZZSFlIGUfZQoaAVoBmggaosMAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UalgHAABhaBVdlGgXXZRoGV2UdWgcakwHAABoHU5oH05oIGqHDAAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwJeG1sOnNwYWNllGq0AgAAdWgcakYHAABoHU5oH05oIGpTDAAAdWJqRwcAACmBlH2UKGgFjAZjYWxsZXKUaAddlGpNBwAAKYGUfZQoaAVoBmgHXZRoP4wGY2FsbGVylIWUgZR9lChoBWgGaCBqowwAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRqWAcAAGFoFV2UaBddlGgZXZR1aBxqTAcAAGgdTmgfTmggap8MAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAl4bWw6c3BhY2WUarQCAAB1aBxqRgcAAGgdTmgfTmggalMMAAB1YmpHBwAAKYGUfZQoaAWMAnRvlGgHXZRqTQcAACmBlH2UKGgFaAZoB12UaD+MAnRvlIWUgZR9lChoBWgGaCBquwwAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRqWAcAAGFoFV2UaBddlGgZXZR1aBxqTAcAAGgdTmgfTmggarcMAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAl4bWw6c3BhY2WUarQCAAB1aBxqRgcAAGgdTmgfTmggalMMAAB1YmpHBwAAKYGUfZQoaAWMDGNvZGVfYWRkcmVzc5RoB12Uak0HAAApgZR9lChoBWgGaAddlGg/jAxjb2RlX2FkZHJlc3OUhZSBlH2UKGgFaAZoIGrTDAAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGpYBwAAYWgVXZRoF12UaBldlHVoHGpMBwAAaB1OaB9OaCBqzwwAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRqtAIAAHVoHGpGBwAAaB1OaB9OaCBqUwwAAHViakcHAAApgZR9lChoBYwVc2hvdWxkX3RyYW5zZmVyX3ZhbHVllGgHXZRqTQcAACmBlH2UKGgFaAZoB12UaD+MFXNob3VsZF90cmFuc2Zlcl92YWx1ZZSFlIGUfZQoaAVoBmggausMAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UalgHAABhaBVdlGgXXZRoGV2UdWgcakwHAABoHU5oH05oIGrnDAAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwJeG1sOnNwYWNllGq0AgAAdWgcakYHAABoHU5oH05oIGpTDAAAdWJqRwcAACmBlH2UKGgFjA1pc19zdGF0aWNjYWxslGgHXZRqTQcAACmBlH2UKGgFaAZoB12UaD+MDWlzX3N0YXRpY2NhbGyUhZSBlH2UKGgFaAZoIGoDDQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGpYBwAAYWgVXZRoF12UaBldlHVoHGpMBwAAaB1OaB9OaCBq/wwAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRqtAIAAHVoHGpGBwAAaB1OaB9OaCBqUwwAAHViakcHAAApgZR9lChoBYwbbWVtb3J5X2lucHV0X3N0YXJ0X3Bvc2l0aW9ulGgHXZRqTQcAACmBlH2UKGgFaAZoB12UaD+MG21lbW9yeV9pbnB1dF9zdGFydF9wb3NpdGlvbpSFlIGUfZQoaAVoBmggahsNAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UalgHAABhaBVdlGgXXZRoGV2UdWgcakwHAABoHU5oH05oIGoXDQAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwJeG1sOnNwYWNllGq0AgAAdWgcakYHAABoHU5oH05oIGpTDAAAdWJqRwcAACmBlH2UKGgFjBFtZW1vcnlfaW5wdXRfc2l6ZZRoB12Uak0HAAApgZR9lChoBWgGaAddlGg/jBFtZW1vcnlfaW5wdXRfc2l6ZZSFlIGUfZQoaAVoBmggajMNAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UalgHAABhaBVdlGgXXZRoGV2UdWgcakwHAABoHU5oH05oIGovDQAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwJeG1sOnNwYWNllGq0AgAAdWgcakYHAABoHU5oH05oIGpTDAAAdWJqRwcAACmBlH2UKGgFjBxtZW1vcnlfb3V0cHV0X3N0YXJ0X3Bvc2l0aW9ulGgHXZRqTQcAACmBlH2UKGgFaAZoB12UaD+MHG1lbW9yeV9vdXRwdXRfc3RhcnRfcG9zaXRpb26UhZSBlH2UKGgFaAZoIGpLDQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGpYBwAAYWgVXZRoF12UaBldlHVoHGpMBwAAaB1OaB9OaCBqRw0AAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRqtAIAAHVoHGpGBwAAaB1OaB9OaCBqUwwAAHViakcHAAApgZR9lChoBYwSbWVtb3J5X291dHB1dF9zaXpllGgHXZRqTQcAACmBlH2UKGgFaAZoB12UaD+MEm1lbW9yeV9vdXRwdXRfc2l6ZZSFlIGUfZQoaAVoBmggamMNAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UalgHAABhaBVdlGgXXZRoGV2UdWgcakwHAABoHU5oH05oIGpfDQAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwJeG1sOnNwYWNllGq0AgAAdWgcakYHAABoHU5oH05oIGpTDAAAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwJeG1sOnNwYWNllGq0AgAAdWgcakAHAABoHWgeaB9OaCBqQAwAAHViZWgOfZQoaBBdlIwyZXRoZXJldW0ucGFyaXMudm0uaW5zdHJ1Y3Rpb25zLnN5c3RlbS5nZW5lcmljX2NhbGyUYWgTXZQoaucHAABq6AcAAIwCcHmUauoHAABq6wcAAGVoFV2UaBddlGgZXZSMBm1vZHVsZZRq8AcAAIwFY2xhc3OUaAaMCGZ1bGxuYW1llGpGDAAAdWgcaiUHAABoHWgeaB9Lemggaj0MAAB1Ymr0BwAAKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgFjDhQZXJmb3JtIHRoZSBjb3JlIGxvZ2ljIG9mIHRoZSBgQ0FMTCpgIGZhbWlseSBvZiBvcGNvZGVzLpRoB12UKGg/jB5QZXJmb3JtIHRoZSBjb3JlIGxvZ2ljIG9mIHRoZSCUhZSBlH2UKGgFaAZoIGqMDQAAaCFoA2gdaERoH0sAdWJqXwMAACmBlH2UKGgFjAdgQ0FMTCpglGgHXZRoP4wFQ0FMTCqUhZSBlH2UKGgFaAZoIGqUDQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGpeAwAAaB1OaB9OaCBqjA0AAHViaD+MEyBmYW1pbHkgb2Ygb3Bjb2Rlcy6UhZSBlH2UKGgFaAZoIGqMDQAAaCFoA2gdaERoH0sAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1oHmgfS31oIGqJDQAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGrzBwAAaB1oHmgfTmggaj0MAAB1YmVoDn2UKGgQXZRoE12UKGqCDQAAjAhmdW5jdGlvbpRlaBVdlGgXXZRoGV2UjAZkb21haW6UaoINAACMB29ianR5cGWUarUNAACMCGRlc2N0eXBllGq1DQAAjAdub2luZGV4lIl1aBxqIAcAAGgdaB5oH05oIGohDAAAdWJqKggAACmBlH2UKGgFWAwHAABkZWYgZ2VuZXJpY19jYWxsKAogICAgZXZtOiBFdm0sCiAgICBnYXM6IFVpbnQsCiAgICB2YWx1ZTogVTI1NiwKICAgIGNhbGxlcjogQWRkcmVzcywKICAgIHRvOiBBZGRyZXNzLAogICAgY29kZV9hZGRyZXNzOiBBZGRyZXNzLAogICAgc2hvdWxkX3RyYW5zZmVyX3ZhbHVlOiBib29sLAogICAgaXNfc3RhdGljY2FsbDogYm9vbCwKICAgIG1lbW9yeV9pbnB1dF9zdGFydF9wb3NpdGlvbjogVTI1NiwKICAgIG1lbW9yeV9pbnB1dF9zaXplOiBVMjU2LAogICAgbWVtb3J5X291dHB1dF9zdGFydF9wb3NpdGlvbjogVTI1NiwKICAgIG1lbW9yeV9vdXRwdXRfc2l6ZTogVTI1NiwKKSAtPiBOb25lOgogICAgZnJvbSAuLi52bS5pbnRlcnByZXRlciBpbXBvcnQgU1RBQ0tfREVQVEhfTElNSVQsIHByb2Nlc3NfbWVzc2FnZQoKICAgIGV2bS5yZXR1cm5fZGF0YSA9IGIiIgoKICAgIGlmIGV2bS5tZXNzYWdlLmRlcHRoICsgMSA+IFNUQUNLX0RFUFRIX0xJTUlUOgogICAgICAgIGV2bS5nYXNfbGVmdCArPSBnYXMKICAgICAgICBwdXNoKGV2bS5zdGFjaywgVTI1NigwKSkKICAgICAgICByZXR1cm4KCiAgICBjYWxsX2RhdGEgPSBtZW1vcnlfcmVhZF9ieXRlcygKICAgICAgICBldm0ubWVtb3J5LCBtZW1vcnlfaW5wdXRfc3RhcnRfcG9zaXRpb24sIG1lbW9yeV9pbnB1dF9zaXplCiAgICApCiAgICBjb2RlID0gZ2V0X2FjY291bnQoZXZtLmVudi5zdGF0ZSwgY29kZV9hZGRyZXNzKS5jb2RlCiAgICBjaGlsZF9tZXNzYWdlID0gTWVzc2FnZSgKICAgICAgICBjYWxsZXI9Y2FsbGVyLAogICAgICAgIHRhcmdldD10bywKICAgICAgICBnYXM9Z2FzLAogICAgICAgIHZhbHVlPXZhbHVlLAogICAgICAgIGRhdGE9Y2FsbF9kYXRhLAogICAgICAgIGNvZGU9Y29kZSwKICAgICAgICBjdXJyZW50X3RhcmdldD10bywKICAgICAgICBkZXB0aD1ldm0ubWVzc2FnZS5kZXB0aCArIDEsCiAgICAgICAgY29kZV9hZGRyZXNzPWNvZGVfYWRkcmVzcywKICAgICAgICBzaG91bGRfdHJhbnNmZXJfdmFsdWU9c2hvdWxkX3RyYW5zZmVyX3ZhbHVlLAogICAgICAgIGlzX3N0YXRpYz1UcnVlIGlmIGlzX3N0YXRpY2NhbGwgZWxzZSBldm0ubWVzc2FnZS5pc19zdGF0aWMsCiAgICAgICAgYWNjZXNzZWRfYWRkcmVzc2VzPWV2bS5hY2Nlc3NlZF9hZGRyZXNzZXMuY29weSgpLAogICAgICAgIGFjY2Vzc2VkX3N0b3JhZ2Vfa2V5cz1ldm0uYWNjZXNzZWRfc3RvcmFnZV9rZXlzLmNvcHkoKSwKICAgICAgICBwYXJlbnRfZXZtPWV2bSwKICAgICkKICAgIGNoaWxkX2V2bSA9IHByb2Nlc3NfbWVzc2FnZShjaGlsZF9tZXNzYWdlLCBldm0uZW52KQoKICAgIGlmIGNoaWxkX2V2bS5lcnJvcjoKICAgICAgICBpbmNvcnBvcmF0ZV9jaGlsZF9vbl9lcnJvcihldm0sIGNoaWxkX2V2bSkKICAgICAgICBldm0ucmV0dXJuX2RhdGEgPSBjaGlsZF9ldm0ub3V0cHV0CiAgICAgICAgcHVzaChldm0uc3RhY2ssIFUyNTYoMCkpCiAgICBlbHNlOgogICAgICAgIGluY29ycG9yYXRlX2NoaWxkX29uX3N1Y2Nlc3MoZXZtLCBjaGlsZF9ldm0pCiAgICAgICAgZXZtLnJldHVybl9kYXRhID0gY2hpbGRfZXZtLm91dHB1dAogICAgICAgIHB1c2goZXZtLnN0YWNrLCBVMjU2KDEpKQoKICAgIGFjdHVhbF9vdXRwdXRfc2l6ZSA9IG1pbihtZW1vcnlfb3V0cHV0X3NpemUsIFUyNTYobGVuKGNoaWxkX2V2bS5vdXRwdXQpKSkKICAgIG1lbW9yeV93cml0ZSgKICAgICAgICBldm0ubWVtb3J5LAogICAgICAgIG1lbW9yeV9vdXRwdXRfc3RhcnRfcG9zaXRpb24sCiAgICAgICAgY2hpbGRfZXZtLm91dHB1dFs6YWN0dWFsX291dHB1dF9zaXplXSwKICAgICkKlGgHXZRoP1gMBwAAZGVmIGdlbmVyaWNfY2FsbCgKICAgIGV2bTogRXZtLAogICAgZ2FzOiBVaW50LAogICAgdmFsdWU6IFUyNTYsCiAgICBjYWxsZXI6IEFkZHJlc3MsCiAgICB0bzogQWRkcmVzcywKICAgIGNvZGVfYWRkcmVzczogQWRkcmVzcywKICAgIHNob3VsZF90cmFuc2Zlcl92YWx1ZTogYm9vbCwKICAgIGlzX3N0YXRpY2NhbGw6IGJvb2wsCiAgICBtZW1vcnlfaW5wdXRfc3RhcnRfcG9zaXRpb246IFUyNTYsCiAgICBtZW1vcnlfaW5wdXRfc2l6ZTogVTI1NiwKICAgIG1lbW9yeV9vdXRwdXRfc3RhcnRfcG9zaXRpb246IFUyNTYsCiAgICBtZW1vcnlfb3V0cHV0X3NpemU6IFUyNTYsCikgLT4gTm9uZToKICAgIGZyb20gLi4udm0uaW50ZXJwcmV0ZXIgaW1wb3J0IFNUQUNLX0RFUFRIX0xJTUlULCBwcm9jZXNzX21lc3NhZ2UKCiAgICBldm0ucmV0dXJuX2RhdGEgPSBiIiIKCiAgICBpZiBldm0ubWVzc2FnZS5kZXB0aCArIDEgPiBTVEFDS19ERVBUSF9MSU1JVDoKICAgICAgICBldm0uZ2FzX2xlZnQgKz0gZ2FzCiAgICAgICAgcHVzaChldm0uc3RhY2ssIFUyNTYoMCkpCiAgICAgICAgcmV0dXJuCgogICAgY2FsbF9kYXRhID0gbWVtb3J5X3JlYWRfYnl0ZXMoCiAgICAgICAgZXZtLm1lbW9yeSwgbWVtb3J5X2lucHV0X3N0YXJ0X3Bvc2l0aW9uLCBtZW1vcnlfaW5wdXRfc2l6ZQogICAgKQogICAgY29kZSA9IGdldF9hY2NvdW50KGV2bS5lbnYuc3RhdGUsIGNvZGVfYWRkcmVzcykuY29kZQogICAgY2hpbGRfbWVzc2FnZSA9IE1lc3NhZ2UoCiAgICAgICAgY2FsbGVyPWNhbGxlciwKICAgICAgICB0YXJnZXQ9dG8sCiAgICAgICAgZ2FzPWdhcywKICAgICAgICB2YWx1ZT12YWx1ZSwKICAgICAgICBkYXRhPWNhbGxfZGF0YSwKICAgICAgICBjb2RlPWNvZGUsCiAgICAgICAgY3VycmVudF90YXJnZXQ9dG8sCiAgICAgICAgZGVwdGg9ZXZtLm1lc3NhZ2UuZGVwdGggKyAxLAogICAgICAgIGNvZGVfYWRkcmVzcz1jb2RlX2FkZHJlc3MsCiAgICAgICAgc2hvdWxkX3RyYW5zZmVyX3ZhbHVlPXNob3VsZF90cmFuc2Zlcl92YWx1ZSwKICAgICAgICBpc19zdGF0aWM9VHJ1ZSBpZiBpc19zdGF0aWNjYWxsIGVsc2UgZXZtLm1lc3NhZ2UuaXNfc3RhdGljLAogICAgICAgIGFjY2Vzc2VkX2FkZHJlc3Nlcz1ldm0uYWNjZXNzZWRfYWRkcmVzc2VzLmNvcHkoKSwKICAgICAgICBhY2Nlc3NlZF9zdG9yYWdlX2tleXM9ZXZtLmFjY2Vzc2VkX3N0b3JhZ2Vfa2V5cy5jb3B5KCksCiAgICAgICAgcGFyZW50X2V2bT1ldm0sCiAgICApCiAgICBjaGlsZF9ldm0gPSBwcm9jZXNzX21lc3NhZ2UoY2hpbGRfbWVzc2FnZSwgZXZtLmVudikKCiAgICBpZiBjaGlsZF9ldm0uZXJyb3I6CiAgICAgICAgaW5jb3Jwb3JhdGVfY2hpbGRfb25fZXJyb3IoZXZtLCBjaGlsZF9ldm0pCiAgICAgICAgZXZtLnJldHVybl9kYXRhID0gY2hpbGRfZXZtLm91dHB1dAogICAgICAgIHB1c2goZXZtLnN0YWNrLCBVMjU2KDApKQogICAgZWxzZToKICAgICAgICBpbmNvcnBvcmF0ZV9jaGlsZF9vbl9zdWNjZXNzKGV2bSwgY2hpbGRfZXZtKQogICAgICAgIGV2bS5yZXR1cm5fZGF0YSA9IGNoaWxkX2V2bS5vdXRwdXQKICAgICAgICBwdXNoKGV2bS5zdGFjaywgVTI1NigxKSkKCiAgICBhY3R1YWxfb3V0cHV0X3NpemUgPSBtaW4obWVtb3J5X291dHB1dF9zaXplLCBVMjU2KGxlbihjaGlsZF9ldm0ub3V0cHV0KSkpCiAgICBtZW1vcnlfd3JpdGUoCiAgICAgICAgZXZtLm1lbW9yeSwKICAgICAgICBtZW1vcnlfb3V0cHV0X3N0YXJ0X3Bvc2l0aW9uLAogICAgICAgIGNoaWxkX2V2bS5vdXRwdXRbOmFjdHVhbF9vdXRwdXRfc2l6ZV0sCiAgICApCpSFlIGUfZQoaAVoBmggar0NAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAZzb3VyY2WUjF4vaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL3NyYy9ldGhlcmV1bS9wYXJpcy92bS9pbnN0cnVjdGlvbnMvc3lzdGVtLnB5lIwJeG1sOnNwYWNllGq0AgAAjAVmb3JjZZSJjAhs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ZCh0bykKICAgICAgICBhY2Nlc3NfZ2FzX2Nvc3QgPSBHQVNfQ09MRF9BQ0NPVU5UX0FDQ0VTUwoKICAgIGNyZWF0ZV9nYXNfY29zdCA9ICgKICAgICAgICBVaW50KDApCiAgICAgICAgaWYgaXNfYWNjb3VudF9hbGl2ZShldm0uZW52LnN0YXRlLCB0bykgb3IgdmFsdWUgPT0gMAogICAgICAgIGVsc2UgR0FTX05FV19BQ0NPVU5UCiAgICApCiAgICB0cmFuc2Zlcl9nYXNfY29zdCA9IFVpbnQoMCkgaWYgdmFsdWUgPT0gMCBlbHNlIEdBU19DQUxMX1ZBTFVFCiAgICBtZXNzYWdlX2NhbGxfZ2FzID0gY2FsY3VsYXRlX21lc3NhZ2VfY2FsbF9nYXMoCiAgICAgICAgdmFsdWUsCiAgICAgICAgZ2FzLAogICAgICAgIFVpbnQoZXZtLmdhc19sZWZ0KSwKICAgICAgICBleHRlbmRfbWVtb3J5LmNvc3QsCiAgICAgICAgYWNjZXNzX2dhc19jb3N0ICsgY3JlYXRlX2dhc19jb3N0ICsgdHJhbnNmZXJfZ2FzX2Nvc3QsCiAgICApCiAgICBjaGFyZ2VfZ2FzKGV2bSwgbWVzc2FnZV9jYWxsX2dhcy5jb3N0ICsgZXh0ZW5kX21lbW9yeS5jb3N0KQoKICAgICMgT1BFUkFUSU9OCiAgICBlbnN1cmUobm90IGV2bS5tZXNzYWdlLmlzX3N0YXRpYyBvciB2YWx1ZSA9PSBVMjU2KDApLCBXcml0ZUluU3RhdGljQ29udGV4dCkKICAgIGV2bS5tZW1vcnkgKz0gYiJceDAwIiAqIGV4dGVuZF9tZW1vcnkuZXhwYW5kX2J5CiAgICBzZW5kZXJfYmFsYW5jZSA9IGdldF9hY2NvdW50KAogICAgICAgIGV2bS5lbnYuc3RhdGUsIGV2bS5tZXNzYWdlLmN1cnJlbnRfdGFyZ2V0CiAgICApLmJhbGFuY2UKICAgIGlmIHNlbmRlcl9iYWxhbmNlIDwgdmFsdWU6CiAgICAgICAgcHVzaChldm0uc3RhY2ssIFUyNTYoMCkpCiAgICAgICAgZXZtLnJldHVybl9kYXRhID0gYiIiCiAgICAgICAgZXZtLmdhc19sZWZ0ICs9IG1lc3NhZ2VfY2FsbF9nYXMuc3RpcGVuZAogICAgZWxzZToKICAgICAgICBnZW5lcmljX2NhbGwoCiAgICAgICAgICAgIGV2bSwKICAgICAgICAgICAgbWVzc2FnZV9jYWxsX2dhcy5zdGlwZW5kLAogICAgICAgICAgICB2YWx1ZSwKICAgICAgICAgICAgZXZtLm1lc3NhZ2UuY3VycmVudF90YXJnZXQsCiAgICAgICAgICAgIHRvLAogICAgICAgICAgICB0bywKICAgICAgICAgICAgVHJ1ZSwKICAgICAgICAgICAgRmFsc2UsCiAgICAgICAgICAgIG1lbW9yeV9pbnB1dF9zdGFydF9wb3NpdGlvbiwKICAgICAgICAgICAgbWVtb3J5X2lucHV0X3NpemUsCiAgICAgICAgICAgIG1lbW9yeV9vdXRwdXRfc3RhcnRfcG9zaXRpb24sCiAgICAgICAgICAgIG1lbW9yeV9vdXRwdXRfc2l6ZSwKICAgICAgICApCgogICAgIyBQUk9HUkFNIENPVU5URVIKICAgIGV2bS5wYyArPSAxCpRoB12UaD9YywcAAGRlZiBjYWxsKGV2bTogRXZtKSAtPiBOb25lOgogICAgIyBTVEFDSwogICAgZ2FzID0gVWludChwb3AoZXZtLnN0YWNrKSkKICAgIHRvID0gdG9fYWRkcmVzcyhwb3AoZXZtLnN0YWNrKSkKICAgIHZhbHVlID0gcG9wKGV2bS5zdGFjaykKICAgIG1lbW9yeV9pbnB1dF9zdGFydF9wb3NpdGlvbiA9IHBvcChldm0uc3RhY2spCiAgICBtZW1vcnlfaW5wdXRfc2l6ZSA9IHBvcChldm0uc3RhY2spCiAgICBtZW1vcnlfb3V0cHV0X3N0YXJ0X3Bvc2l0aW9uID0gcG9wKGV2bS5zdGFjaykKICAgIG1lbW9yeV9vdXRwdXRfc2l6ZSA9IHBvcChldm0uc3RhY2spCgogICAgIyBHQVMKICAgIGV4dGVuZF9tZW1vcnkgPSBjYWxjdWxhdGVfZ2FzX2V4dGVuZF9tZW1vcnkoCiAgICAgICAgZXZtLm1lbW9yeSwKICAgICAgICBbCiAgICAgICAgICAgIChtZW1vcnlfaW5wdXRfc3RhcnRfcG9zaXRpb24sIG1lbW9yeV9pbnB1dF9zaXplKSwKICAgICAgICAgICAgKG1lbW9yeV9vdXRwdXRfc3RhcnRfcG9zaXRpb24sIG1lbW9yeV9vdXRwdXRfc2l6ZSksCiAgICAgICAgXSwKICAgICkKCiAgICBpZiB0byBpbiBldm0uYWNjZXNzZWRfYWRkcmVzc2VzOgogICAgICAgIGFjY2Vzc19nYXNfY29zdCA9IEdBU19XQVJNX0FDQ0VTUwogICAgZWxzZToKICAgICAgICBldm0uYWNjZXNzZWRfYWRkcmVzc2VzLmFkZCh0bykKICAgICAgICBhY2Nlc3NfZ2FzX2Nvc3QgPSBHQVNfQ09MRF9BQ0NPVU5UX0FDQ0VTUwoKICAgIGNyZWF0ZV9nYXNfY29zdCA9ICgKICAgICAgICBVaW50KDApCiAgICAgICAgaWYgaXNfYWNjb3VudF9hbGl2ZShldm0uZW52LnN0YXRlLCB0bykgb3IgdmFsdWUgPT0gMAogICAgICAgIGVsc2UgR0FTX05FV19BQ0NPVU5UCiAgICApCiAgICB0cmFuc2Zlcl9nYXNfY29zdCA9IFVpbnQoMCkgaWYgdmFsdWUgPT0gMCBlbHNlIEdBU19DQUxMX1ZBTFVFCiAgICBtZXNzYWdlX2NhbGxfZ2FzID0gY2FsY3VsYXRlX21lc3NhZ2VfY2FsbF9nYXMoCiAgICAgICAgdmFsdWUsCiAgICAgICAgZ2FzLAogICAgICAgIFVpbnQoZXZtLmdhc19sZWZ0KSwKICAgICAgICBleHRlbmRfbWVtb3J5LmNvc3QsCiAgICAgICAgYWNjZXNzX2dhc19jb3N0ICsgY3JlYXRlX2dhc19jb3N0ICsgdHJhbnNmZXJfZ2FzX2Nvc3QsCiAgICApCiAgICBjaGFyZ2VfZ2FzKGV2bSwgbWVzc2FnZV9jYWxsX2dhcy5jb3N0ICsgZXh0ZW5kX21lbW9yeS5jb3N0KQoKICAgICMgT1BFUkFUSU9OCiAgICBlbnN1cmUobm90IGV2bS5tZXNzYWdlLmlzX3N0YXRpYyBvciB2YWx1ZSA9PSBVMjU2KDApLCBXcml0ZUluU3RhdGljQ29udGV4dCkKICAgIGV2bS5tZW1vcnkgKz0gYiJceDAwIiAqIGV4dGVuZF9tZW1vcnkuZXhwYW5kX2J5CiAgICBzZW5kZXJfYmFsYW5jZSA9IGdldF9hY2NvdW50KAogICAgICAgIGV2bS5lbnYuc3RhdGUsIGV2bS5tZXNzYWdlLmN1cnJlbnRfdGFyZ2V0CiAgICApLmJhbGFuY2UKICAgIGlmIHNlbmRlcl9iYWxhbmNlIDwgdmFsdWU6CiAgICAgICAgcHVzaChldm0uc3RhY2ssIFUyNTYoMCkpCiAgICAgICAgZXZtLnJldHVybl9kYXRhID0gYiIiCiAgICAgICAgZXZtLmdhc19sZWZ0ICs9IG1lc3NhZ2VfY2FsbF9nYXMuc3RpcGVuZAogICAgZWxzZToKICAgICAgICBnZW5lcmljX2NhbGwoCiAgICAgICAgICAgIGV2bSwKICAgICAgICAgICAgbWVzc2FnZV9jYWxsX2dhcy5zdGlwZW5kLAogICAgICAgICAgICB2YWx1ZSwKICAgICAgICAgICAgZXZtLm1lc3NhZ2UuY3VycmVudF90YXJnZXQsCiAgICAgICAgICAgIHRvLAogICAgICAgICAgICB0bywKICAgICAgICAgICAgVHJ1ZSwKICAgICAgICAgICAgRmFsc2UsCiAgICAgICAgICAgIG1lbW9yeV9pbnB1dF9zdGFydF9wb3NpdGlvbiwKICAgICAgICAgICAgbWVtb3J5X2lucHV0X3NpemUsCiAgICAgICAgICAgIG1lbW9yeV9vdXRwdXRfc3RhcnRfcG9zaXRpb24sCiAgICAgICAgICAgIG1lbW9yeV9vdXRwdXRfc2l6ZSwKICAgICAgICApCgogICAgIyBQUk9HUkFNIENPVU5URVIKICAgIGV2bS5wYyArPSAxCpSFlIGUfZQoaAVoBmggaqUOAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAZzb3VyY2WUjF4vaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL3NyYy9ldGhlcmV1bS9wYXJpcy92bS9pbnN0cnVjdGlvbnMvc3lzdGVtLnB5lIwJeG1sOnNwYWNllGq0AgAAjAVmb3JjZZSJjAhsYW5ndWFnZZSMBnB5dGhvbpSMDmhpZ2hsaWdodF9hcmdzlH2UapcIAABLAXOMB2xpbmVub3OUiXVoHGopCAAAaB1oHmgfS5Ro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YWNjZXNzX2dhc19jb3N0ID0gR0FTX1dBUk1fQUNDRVNTCiAgICBlbHNlOgogICAgICAgIGV2bS5hY2Nlc3NlZF9hZGRyZXNzZXMuYWRkKGNvZGVfYWRkcmVzcykKICAgICAgICBhY2Nlc3NfZ2FzX2Nvc3QgPSBHQVNfQ09MRF9BQ0NPVU5UX0FDQ0VTUwoKICAgIHRyYW5zZmVyX2dhc19jb3N0ID0gVWludCgwKSBpZiB2YWx1ZSA9PSAwIGVsc2UgR0FTX0NBTExfVkFMVUUKICAgIG1lc3NhZ2VfY2FsbF9nYXMgPSBjYWxjdWxhdGVfbWVzc2FnZV9jYWxsX2dhcygKICAgICAgICB2YWx1ZSwKICAgICAgICBnYXMsCiAgICAgICAgVWludChldm0uZ2FzX2xlZnQpLAogICAgICAgIGV4dGVuZF9tZW1vcnkuY29zdCwKICAgICAgICBhY2Nlc3NfZ2FzX2Nvc3QgKyB0cmFuc2Zlcl9nYXNfY29zdCwKICAgICkKICAgIGNoYXJnZV9nYXMoZXZtLCBtZXNzYWdlX2NhbGxfZ2FzLmNvc3QgKyBleHRlbmRfbWVtb3J5LmNvc3QpCgogICAgIyBPUEVSQVRJT04KICAgIGV2bS5tZW1vcnkgKz0gYiJceDAwIiAqIGV4dGVuZF9tZW1vcnkuZXhwYW5kX2J5CiAgICBzZW5kZXJfYmFsYW5jZSA9IGdldF9hY2NvdW50KAogICAgICAgIGV2bS5lbnYuc3RhdGUsIGV2bS5tZXNzYWdlLmN1cnJlbnRfdGFyZ2V0CiAgICApLmJhbGFuY2UKICAgIGlmIHNlbmRlcl9iYWxhbmNlIDwgdmFsdWU6CiAgICAgICAgcHVzaChldm0uc3RhY2ssIFUyNTYoMCkpCiAgICAgICAgZXZtLnJldHVybl9kYXRhID0gYiIiCiAgICAgICAgZXZtLmdhc19sZWZ0ICs9IG1lc3NhZ2VfY2FsbF9nYXMuc3RpcGVuZAogICAgZWxzZToKICAgICAgICBnZW5lcmljX2NhbGwoCiAgICAgICAgICAgIGV2bSwKICAgICAgICAgICAgbWVzc2FnZV9jYWxsX2dhcy5zdGlwZW5kLAogICAgICAgICAgICB2YWx1ZSwKICAgICAgICAgICAgZXZtLm1lc3NhZ2UuY3VycmVudF90YXJnZXQsCiAgICAgICAgICAgIHRvLAogICAgICAgICAgICBjb2RlX2FkZHJlc3MsCiAgICAgICAgICAgIFRydWUsCiAgICAgICAgICAgIEZhbHNlLAogICAgICAgICAgICBtZW1vcnlfaW5wdXRfc3RhcnRfcG9zaXRpb24sCiAgICAgICAgICAgIG1lbW9yeV9pbnB1dF9zaXplLAogICAgICAgICAgICBtZW1vcnlfb3V0cHV0X3N0YXJ0X3Bvc2l0aW9uLAogICAgICAgICAgICBtZW1vcnlfb3V0cHV0X3NpemUsCiAgICAgICAgKQoKICAgICMgUFJPR1JBTSBDT1VOVEVSCiAgICBldm0ucGMgKz0gMQqUaAddlGg/WDIHAABkZWYgY2FsbGNvZGUoZXZtOiBFdm0pIC0+IE5vbmU6CiAgICAjIFNUQUNLCiAgICBnYXMgPSBVaW50KHBvcChldm0uc3RhY2spKQogICAgY29kZV9hZGRyZXNzID0gdG9fYWRkcmVzcyhwb3AoZXZtLnN0YWNrKSkKICAgIHZhbHVlID0gcG9wKGV2bS5zdGFjaykKICAgIG1lbW9yeV9pbnB1dF9zdGFydF9wb3NpdGlvbiA9IHBvcChldm0uc3RhY2spCiAgICBtZW1vcnlfaW5wdXRfc2l6ZSA9IHBvcChldm0uc3RhY2spCiAgICBtZW1vcnlfb3V0cHV0X3N0YXJ0X3Bvc2l0aW9uID0gcG9wKGV2bS5zdGFjaykKICAgIG1lbW9yeV9vdXRwdXRfc2l6ZSA9IHBvcChldm0uc3RhY2spCgogICAgIyBHQVMKICAgIHRvID0gZXZtLm1lc3NhZ2UuY3VycmVudF90YXJnZXQKCiAgICBleHRlbmRfbWVtb3J5ID0gY2FsY3VsYXRlX2dhc19leHRlbmRfbWVtb3J5KAogICAgICAgIGV2bS5tZW1vcnksCiAgICAgICAgWwogICAgICAgICAgICAobWVtb3J5X2lucHV0X3N0YXJ0X3Bvc2l0aW9uLCBtZW1vcnlfaW5wdXRfc2l6ZSksCiAgICAgICAgICAgIChtZW1vcnlfb3V0cHV0X3N0YXJ0X3Bvc2l0aW9uLCBtZW1vcnlfb3V0cHV0X3NpemUpLAogICAgICAgIF0sCiAgICApCgogICAgaWYgY29kZV9hZGRyZXNzIGluIGV2bS5hY2Nlc3NlZF9hZGRyZXNzZXM6CiAgICAgICAgYWNjZXNzX2dhc19jb3N0ID0gR0FTX1dBUk1fQUNDRVNTCiAgICBlbHNlOgogICAgICAgIGV2bS5hY2Nlc3NlZF9hZGRyZXNzZXMuYWRkKGNvZGVfYWRkcmVzcykKICAgICAgICBhY2Nlc3NfZ2FzX2Nvc3QgPSBHQVNfQ09MRF9BQ0NPVU5UX0FDQ0VTUwoKICAgIHRyYW5zZmVyX2dhc19jb3N0ID0gVWludCgwKSBpZiB2YWx1ZSA9PSAwIGVsc2UgR0FTX0NBTExfVkFMVUUKICAgIG1lc3NhZ2VfY2FsbF9nYXMgPSBjYWxjdWxhdGVfbWVzc2FnZV9jYWxsX2dhcygKICAgICAgICB2YWx1ZSwKICAgICAgICBnYXMsCiAgICAgICAgVWludChldm0uZ2FzX2xlZnQpLAogICAgICAgIGV4dGVuZF9tZW1vcnkuY29zdCwKICAgICAgICBhY2Nlc3NfZ2FzX2Nvc3QgKyB0cmFuc2Zlcl9nYXNfY29zdCwKICAgICkKICAgIGNoYXJnZV9nYXMoZXZtLCBtZXNzYWdlX2NhbGxfZ2FzLmNvc3QgKyBleHRlbmRfbWVtb3J5LmNvc3QpCgogICAgIyBPUEVSQVRJT04KICAgIGV2bS5tZW1vcnkgKz0gYiJceDAwIiAqIGV4dGVuZF9tZW1vcnkuZXhwYW5kX2J5CiAgICBzZW5kZXJfYmFsYW5jZSA9IGdldF9hY2NvdW50KAogICAgICAgIGV2bS5lbnYuc3RhdGUsIGV2bS5tZXNzYWdlLmN1cnJlbnRfdGFyZ2V0CiAgICApLmJhbGFuY2UKICAgIGlmIHNlbmRlcl9iYWxhbmNlIDwgdmFsdWU6CiAgICAgICAgcHVzaChldm0uc3RhY2ssIFUyNTYoMCkpCiAgICAgICAgZXZtLnJldHVybl9kYXRhID0gYiIiCiAgICAgICAgZXZtLmdhc19sZWZ0ICs9IG1lc3NhZ2VfY2FsbF9nYXMuc3RpcGVuZAogICAgZWxzZToKICAgICAgICBnZW5lcmljX2NhbGwoCiAgICAgICAgICAgIGV2bSwKICAgICAgICAgICAgbWVzc2FnZV9jYWxsX2dh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OgogICAgIyBTVEFDSwogICAgYmVuZWZpY2lhcnkgPSB0b19hZGRyZXNzKHBvcChldm0uc3RhY2spKQoKICAgICMgR0FTCiAgICBnYXNfY29zdCA9IEdBU19TRUxGX0RFU1RSVUNUCiAgICBpZiBiZW5lZmljaWFyeSBub3QgaW4gZXZtLmFjY2Vzc2VkX2FkZHJlc3NlczoKICAgICAgICBldm0uYWNjZXNzZWRfYWRkcmVzc2VzLmFkZChiZW5lZmljaWFyeSkKICAgICAgICBnYXNfY29zdCArPSBHQVNfQ09MRF9BQ0NPVU5UX0FDQ0VTUwoKICAgIGlmICgKICAgICAgICBub3QgaXNfYWNjb3VudF9hbGl2ZShldm0uZW52LnN0YXRlLCBiZW5lZmljaWFyeSkKICAgICAgICBhbmQgZ2V0X2FjY291bnQoZXZtLmVudi5zdGF0ZSwgZXZtLm1lc3NhZ2UuY3VycmVudF90YXJnZXQpLmJhbGFuY2UgIT0gMAogICAgKToKICAgICAgICBnYXNfY29zdCArPSBHQVNfU0VMRl9ERVNUUlVDVF9ORVdfQUNDT1VOVAoKICAgIGNoYXJnZV9nYXMoZXZtLCBnYXNfY29zdCkKCiAgICAjIE9QRVJBVElPTgogICAgZW5zdXJlKG5vdCBldm0ubWVzc2FnZS5pc19zdGF0aWMsIFdyaXRlSW5TdGF0aWNDb250ZXh0KQoKICAgIG9yaWdpbmF0b3IgPSBldm0ubWVzc2FnZS5jdXJyZW50X3RhcmdldAogICAgYmVuZWZpY2lhcnlfYmFsYW5jZSA9IGdldF9hY2NvdW50KGV2bS5lbnYuc3RhdGUsIGJlbmVmaWNpYXJ5KS5iYWxhbmNlCiAgICBvcmlnaW5hdG9yX2JhbGFuY2UgPSBnZXRfYWNjb3VudChldm0uZW52LnN0YXRlLCBvcmlnaW5hdG9yKS5iYWxhbmNlCgogICAgIyBGaXJzdCBUcmFuc2ZlciB0byBiZW5lZmljaWFyeQogICAgc2V0X2FjY291bnRfYmFsYW5jZSgKICAgICAgICBldm0uZW52LnN0YXRlLCBiZW5lZmljaWFyeSwgYmVuZWZpY2lhcnlfYmFsYW5jZSArIG9yaWdpbmF0b3JfYmFsYW5jZQogICAgKQogICAgIyBOZXh0LCBaZXJvIHRoZSBiYWxhbmNlIG9mIHRoZSBhZGRyZXNzIGJlaW5nIGRlbGV0ZWQgKG11c3QgY29tZSBhZnRlcgogICAgIyBzZW5kaW5nIHRvIGJlbmVmaWNpYXJ5IGluIGNhc2UgdGhlIGNvbnRyYWN0IG5hbWVkIGl0c2VsZiBhcyB0aGUKICAgICMgYmVuZWZpY2lhcnkpLgogICAgc2V0X2FjY291bnRfYmFsYW5jZShldm0uZW52LnN0YXRlLCBvcmlnaW5hdG9yLCBVMjU2KDApKQoKICAgICMgcmVnaXN0ZXIgYWNjb3VudCBmb3IgZGVsZXRpb24KICAgIGV2bS5hY2NvdW50c190b19kZWxldGUuYWRkKG9yaWdpbmF0b3IpCgogICAgIyBtYXJrIGJlbmVmaWNpYXJ5IGFzIHRvdWNoZWQKICAgIGlmIGFjY291bnRfZXhpc3RzX2FuZF9pc19lbXB0eShldm0uZW52LnN0YXRlLCBiZW5lZmljaWFyeSk6CiAgICAgICAgZXZtLnRvdWNoZWRfYWNjb3VudHMuYWRkKGJlbmVmaWNpYXJ5KQoKICAgICMgSEFMVCB0aGUgZXhlY3V0aW9uCiAgICBldm0ucnVubmluZyA9IEZhbHNlCgogICAgIyBQUk9HUkFNIENPVU5URVIKICAgIHBhc3MKlJW9QgAAAAAAAGgHXZRoP1izBQAAZGVmIHNlbGZkZXN0cnVjdChldm06IEV2bSkgLT4gTm9uZToKICAgICMgU1RBQ0sKICAgIGJlbmVmaWNpYXJ5ID0gdG9fYWRkcmVzcyhwb3AoZXZtLnN0YWNrKSkKCiAgICAjIEdBUwogICAgZ2FzX2Nvc3QgPSBHQVNfU0VMRl9ERVNUUlVDVAogICAgaWYgYmVuZWZpY2lhcnkgbm90IGluIGV2bS5hY2Nlc3NlZF9hZGRyZXNzZXM6CiAgICAgICAgZXZtLmFjY2Vzc2VkX2FkZHJlc3Nlcy5hZGQoYmVuZWZpY2lhcnkpCiAgICAgICAgZ2FzX2Nvc3QgKz0gR0FTX0NPTERfQUNDT1VOVF9BQ0NFU1MKCiAgICBpZiAoCiAgICAgICAgbm90IGlzX2FjY291bnRfYWxpdmUoZXZtLmVudi5zdGF0ZSwgYmVuZWZpY2lhcnkpCiAgICAgICAgYW5kIGdldF9hY2NvdW50KGV2bS5lbnYuc3RhdGUsIGV2bS5tZXNzYWdlLmN1cnJlbnRfdGFyZ2V0KS5iYWxhbmNlICE9IDAKICAgICk6CiAgICAgICAgZ2FzX2Nvc3QgKz0gR0FTX1NFTEZfREVTVFJVQ1RfTkVXX0FDQ09VTlQKCiAgICBjaGFyZ2VfZ2FzKGV2bSwgZ2FzX2Nvc3QpCgogICAgIyBPUEVSQVRJT04KICAgIGVuc3VyZShub3QgZXZtLm1lc3NhZ2UuaXNfc3RhdGljLCBXcml0ZUluU3RhdGljQ29udGV4dCkKCiAgICBvcmlnaW5hdG9yID0gZXZtLm1lc3NhZ2UuY3VycmVudF90YXJnZXQKICAgIGJlbmVmaWNpYXJ5X2JhbGFuY2UgPSBnZXRfYWNjb3VudChldm0uZW52LnN0YXRlLCBiZW5lZmljaWFyeSkuYmFsYW5jZQogICAgb3JpZ2luYXRvcl9iYWxhbmNlID0gZ2V0X2FjY291bnQoZXZtLmVudi5zdGF0ZSwgb3JpZ2luYXRvcikuYmFsYW5jZQoKICAgICMgRmlyc3QgVHJhbnNmZXIgdG8gYmVuZWZpY2lhcnkKICAgIHNldF9hY2NvdW50X2JhbGFuY2UoCiAgICAgICAgZXZtLmVudi5zdGF0ZSwgYmVuZWZpY2lhcnksIGJlbmVmaWNpYXJ5X2JhbGFuY2UgKyBvcmlnaW5hdG9yX2JhbGFuY2UKICAgICkKICAgICMgTmV4dCwgWmVybyB0aGUgYmFsYW5jZSBvZiB0aGUgYWRkcmVzcyBiZWluZyBkZWxldGVkIChtdXN0IGNvbWUgYWZ0ZXIKICAgICMgc2VuZGluZyB0byBiZW5lZmljaWFyeSBpbiBjYXNlIHRoZSBjb250cmFjdCBuYW1lZCBpdHNlbGYgYXMgdGhlCiAgICAjIGJlbmVmaWNpYXJ5KS4KICAgIHNldF9hY2NvdW50X2JhbGFuY2UoZXZtLmVudi5zdGF0ZSwgb3JpZ2luYXRvciwgVTI1NigwKSkKCiAgICAjIHJlZ2lzdGVyIGFjY291bnQgZm9yIGRlbGV0aW9uCiAgICBldm0uYWNjb3VudHNfdG9fZGVsZXRlLmFkZChvcmlnaW5hdG9yKQoKICAgICMgbWFyayBiZW5lZmljaWFy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cnlfb3V0cHV0X3N0YXJ0X3Bvc2l0aW9uID0gcG9wKGV2bS5zdGFjaykKICAgIG1lbW9yeV9vdXRwdXRfc2l6ZSA9IHBvcChldm0uc3RhY2spCgogICAgIyBHQVMKICAgIGV4dGVuZF9tZW1vcnkgPSBjYWxjdWxhdGVfZ2FzX2V4dGVuZF9tZW1vcnkoCiAgICAgICAgZXZtLm1lbW9yeSwKICAgICAgICBbCiAgICAgICAgICAgIChtZW1vcnlfaW5wdXRfc3RhcnRfcG9zaXRpb24sIG1lbW9yeV9pbnB1dF9zaXplKSwKICAgICAgICAgICAgKG1lbW9yeV9vdXRwdXRfc3RhcnRfcG9zaXRpb24sIG1lbW9yeV9vdXRwdXRfc2l6ZSksCiAgICAgICAgXSwKICAgICkKCiAgICBpZiBjb2RlX2FkZHJlc3MgaW4gZXZtLmFjY2Vzc2VkX2FkZHJlc3NlczoKICAgICAgICBhY2Nlc3NfZ2FzX2Nvc3QgPSBHQVNfV0FSTV9BQ0NFU1MKICAgIGVsc2U6CiAgICAgICAgZXZtLmFjY2Vzc2VkX2FkZHJlc3Nlcy5hZGQoY29kZV9hZGRyZXNzKQogICAgICAgIGFjY2Vzc19nYXNfY29zdCA9IEdBU19DT0xEX0FDQ09VTlRfQUNDRVNTCgogICAgbWVzc2FnZV9jYWxsX2dhcyA9IGNhbGN1bGF0ZV9tZXNzYWdlX2NhbGxfZ2FzKAogICAgICAgIFUyNTYoMCksIGdhcywgVWludChldm0uZ2FzX2xlZnQpLCBleHRlbmRfbWVtb3J5LmNvc3QsIGFjY2Vzc19nYXNfY29zdAogICAgKQogICAgY2hhcmdlX2dhcyhldm0sIG1lc3NhZ2VfY2FsbF9nYXMuY29zdCArIGV4dGVuZF9tZW1vcnkuY29zdCkKCiAgICAjIE9QRVJBVElPTgogICAgZXZtLm1lbW9yeSArPSBiIlx4MDAiICogZXh0ZW5kX21lbW9yeS5leHBhbmRfYnkKICAgIGdlbmVyaWNfY2FsbCgKICAgICAgICBldm0sCiAgICAgICAgbWVzc2FnZV9jYWxsX2dhcy5zdGlwZW5kLAogICAgICAgIGV2bS5tZXNzYWdlLnZhbHVlLAogICAgICAgIGV2bS5tZXNzYWdlLmNhbGxlciwKICAgICAgICBldm0ubWVzc2FnZS5jdXJyZW50X3RhcmdldCwKICAgICAgICBjb2RlX2FkZHJlc3MsCiAgICAgICAgRmFsc2UsCiAgICAgICAgRmFsc2UsCiAgICAgICAgbWVtb3J5X2lucHV0X3N0YXJ0X3Bvc2l0aW9uLAogICAgICAgIG1lbW9yeV9pbnB1dF9zaXplLAogICAgICAgIG1lbW9yeV9vdXRwdXRfc3RhcnRfcG9zaXRpb24sCiAgICAgICAgbWVtb3J5X291dHB1dF9zaXplLAogICAgKQoKICAgICMgUFJPR1JBTSBDT1VOVEVSCiAgICBldm0ucGMgKz0gMQqUaAddlGg/WGsFAABkZWYgZGVsZWdhdGVjYWxsKGV2bTogRXZtKSAtPiBOb25lOgogICAgIyBTVEFDSwogICAgZ2FzID0gVWludChwb3AoZXZtLnN0YWNrKSkKICAgIGNvZGVfYWRkcmVzcyA9IHRvX2FkZHJlc3MocG9wKGV2bS5zdGFjaykpCiAgICBtZW1vcnlfaW5wdXRfc3RhcnRfcG9zaXRpb24gPSBwb3AoZXZtLnN0YWNrKQogICAgbWVtb3J5X2lucHV0X3NpemUgPSBwb3AoZXZtLnN0YWNrKQogICAgbWVtb3J5X291dHB1dF9zdGFydF9wb3NpdGlvbiA9IHBvcChldm0uc3RhY2spCiAgICBtZW1vcnlfb3V0cHV0X3NpemUgPSBwb3AoZXZtLnN0YWNrKQoKICAgICMgR0FTCiAgICBleHRlbmRfbWVtb3J5ID0gY2FsY3VsYXRlX2dhc19leHRlbmRfbWVtb3J5KAogICAgICAgIGV2bS5tZW1vcnksCiAgICAgICAgWwogICAgICAgICAgICAobWVtb3J5X2lucHV0X3N0YXJ0X3Bvc2l0aW9uLCBtZW1vcnlfaW5wdXRfc2l6ZSksCiAgICAgICAgICAgIChtZW1vcnlfb3V0cHV0X3N0YXJ0X3Bvc2l0aW9uLCBtZW1vcnlfb3V0cHV0X3NpemUpLAogICAgICAgIF0sCiAgICApCgogICAgaWYgY29kZV9hZGRyZXNzIGluIGV2bS5hY2Nlc3NlZF9hZGRyZXNzZXM6CiAgICAgICAgYWNjZXNzX2dhc19jb3N0ID0gR0FTX1dBUk1fQUNDRVNTCiAgICBlbHNlOgogICAgICAgIGV2bS5hY2Nlc3NlZF9hZGRyZXNzZXMuYWRkKGNvZGVfYWRkcmVzcykKICAgICAgICBhY2Nlc3NfZ2FzX2Nvc3QgPSBHQVNfQ09MRF9BQ0NPVU5UX0FDQ0VTUwoKICAgIG1lc3NhZ2VfY2FsbF9nYXMgPSBjYWxjdWxhdGVfbWVzc2FnZV9jYWxsX2dhcygKICAgICAgICBVMjU2KDApLCBnYXMsIFVpbnQoZXZtLmdhc19sZWZ0KSwgZXh0ZW5kX21lbW9yeS5jb3N0LCBhY2Nlc3NfZ2FzX2Nvc3QKICAgICkKICAgIGNoYXJnZV9nYXMoZXZtLCBtZXNzYWdlX2NhbGxfZ2FzLmNvc3QgKyBleHRlbmRfbWVtb3J5LmNvc3QpCgogICAgIyBPUEVSQVRJT04KICAgIGV2bS5tZW1vcnkgKz0gYiJceDAwIiAqIGV4dGVuZF9tZW1vcnkuZXhwYW5kX2J5CiAgICBnZW5lcmljX2NhbGwoCiAgICAgICAgZXZtLAogICAgICAgIG1lc3NhZ2VfY2FsbF9nYXMuc3RpcGVuZCwKICAgICAgICBldm0ubWVzc2FnZS52YWx1ZSwKICAgICAgICBldm0ubWVzc2FnZS5jYWxsZXIsCiAgICAgICAgZXZtLm1lc3NhZ2UuY3VycmVudF90YXJnZXQsCiAgICAgICAgY29kZV9hZGRyZXNzLAogICAgICAgIEZhbHNlLAogICAgICAgIEZhbHNlLAogICAgICAgIG1lbW9yeV9pbnB1dF9zdGFydF9wb3NpdGlvbiwKICAgICAgICBtZW1vcnlfaW5wdXRfc2l6ZSwKICAgICAgICBtZW1vcnlfb3V0cHV0X3N0YXJ0X3Bvc2l0aW9uLAogICAgICAgIG1lbW9yeV9vdXRwdXRfc2l6ZSwKICAgICkKCiAgICAjIFBST0dSQU0gQ09VTlRFUgogICAgZXZtLnBjICs9IDEKlIWUgZR9lChoBWgGaCBqXREAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMBnNvdXJjZZSMXi9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3Mvc3JjL2V0aGVyZXVtL3BhcmlzL3ZtL2luc3RydWN0aW9ucy9zeXN0ZW0ucHmUjAl4bWw6c3BhY2WUarQCAACMBWZvcmNllImMCGxhbmd1YWdllIwGcHl0aG9ulIwOaGlnaGxpZ2h0X2FyZ3OUfZRqlwgAAEsBc4wHbGluZW5vc5SJdWgcaikIAABoHWgeaB9LymggapMQAAB1YmVoDn2UKGgQXZRqHAIAAGFoE12UaBVdlIwMZGVsZWdhdGVjYWxslGFoF12UaBldlHVoHGgzaB1oHmgfS71oIGrzBgAAaCFoA3ViaDQpgZR9lChoBWgGaAddlChoOSmBlH2UKGgFjApzdGF0aWNjYWxslGgHXZRoP4wKc3RhdGljY2FsbJSFlIGUfZQoaAVoBmggan4RAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaDhoHWgeaB9Lz2ggansRAAB1YmgkKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAdlbnRyaWVzlF2UdWgcaCNoHU5oH05oIGp7EQAAdWJqIQcAACmBlH2UKGgFaAZoB12UKGomBwAAKYGUfZQoaAWMD3N0YXRpY2NhbGwoZXZtKZRoB12UKGosBwAAKYGUfZQoaAWMCnN0YXRpY2NhbGyUaAddlGg/jApzdGF0aWNjYWxslIWUgZR9lChoBWgGaCBqnhEAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZQoajgHAABqOQcAAGo6BwAAajsHAABlaBVdlGgXXZRoGV2UjAl4bWw6c3BhY2WUarQCAAB1aBxqKwcAAGgdaB5oH05oIGqaEQAAdWJqQQcAACmBlH2UKGgFjANldm2UaAddlGpHBwAAKYGUfZQoaAWMA2V2bZRoB12Uak0HAAApgZR9lChoBWgGaAddlGg/jANldm2UhZSBlH2UKGgFaAZoIGq1EQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGpYBwAAYWgVXZRoF12UaBldlHVoHGpMBwAAaB1OaB9OaCBqsREAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRqtAIAAHVoHGpGBwAAaB1OaB9OaCBqrREAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRqtAIAAHVoHGpABwAAaB1oHmgfTmggapoRAAB1YmVoDn2UKGgQXZSMMGV0aGVyZXVtLnBhcmlzLnZtLmluc3RydWN0aW9ucy5zeXN0ZW0uc3RhdGljY2FsbJRhaBNdlChq5wcAAGroBwAAjAJweZRq6gcAAGrrBwAAZWgVXZRoF12UaBldlIwGbW9kdWxllGrwBwAAjAVjbGFzc5RoBowIZnVsbG5hbWWUaqARAAB1aBxqJQcAAGgdaB5oH0vSaCBqlxEAAHViavQHAAApgZR9lChoBWgGaAddlChoaSmBlH2UKGgFjB1NZXNzYWdlLWNhbGwgaW50byBhbiBhY2NvdW50LpRoB12UaD+MHU1lc3NhZ2UtY2FsbCBpbnRvIGFuIGFjY291bnQulIWUgZR9lChoBWgGaCBq3hEAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoaGgdaB5oH0vVaCBq2xEAAHViahIJAAApgZR9lChoBWgGaAddlGoXCQAAKYGUfZQoaAVoBmgHXZQoahwJAAApgZR9lChoBYwKUGFyYW1ldGVyc5RoB12UaD+MClBhcmFtZXRlcnOUhZSBlH2UKGgFaAZoIGryEQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGobCQAAaB1oHmgfSwBoIGrvEQAAdWJqLAkAACmBlH2UKGgFaAZoB12UaGkpgZR9lChoBYwdZXZtIC0tIFRoZSBjdXJyZW50IEVWTSBmcmFtZS6UaAddlChqNQkAACmBlH2UKGgFjANldm2UaAddlGg/jANldm2UhZSBlH2UKGgFaAZoIGoHEgAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwLcmVmc3BlY2lmaWOUiIwJcHk6bW9kdWxllGrwBwAAjAhweTpjbGFzc5ROdWgcajQJAABoHU5oH05oIGoDEgAAdWJoP4wbIOKAkyBUaGUgY3VycmVudCBFVk0gZnJhbWUulIWUgZR9lChoBWgGaCBqAxIAAGghaANoHWhEaB9LAHViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoaGgdTmgfTmggagASAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaisJAABoHU5oH05oIGrvEQAAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGoWCQAAaB1OaB9OaCBq7BEAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqEQkAAGgdTmgfTmggatsRAAB1YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcavMHAABoHWgeaB9OaCBqlxEAAHViZWgOfZQoaBBdlGgTXZQoatQRAACMCGZ1bmN0aW9ulGVoFV2UaBddlGgZXZSMBmRvbWFpbpRq1BEAAIwHb2JqdHlwZZRqPRIAAIwIZGVzY3R5cGWUaj0SAACMB25vaW5kZXiUiXVoHGogBwAAaB1OaB9OaCBqexEAAHViaioIAAApgZR9lChoBVhGBQAAZGVmIHN0YXRpY2NhbGwoZXZtOiBFdm0pIC0+IE5vbmU6CiAgICAjIFNUQUNLCiAgICBnYXMgPSBVaW50KHBvcChldm0uc3RhY2spKQogICAgdG8gPSB0b19hZGRyZXNzKHBvcChldm0uc3RhY2spKQogICAgbWVtb3J5X2lucHV0X3N0YXJ0X3Bvc2l0aW9uID0gcG9wKGV2bS5zdGFjaykKICAgIG1lbW9yeV9pbnB1dF9zaXplID0gcG9wKGV2bS5zdGFjaykKICAgIG1lbW9yeV9vdXRwdXRfc3RhcnRfcG9zaXRpb24gPSBwb3AoZXZtLnN0YWNrKQogICAgbWVtb3J5X291dHB1dF9zaXplID0gcG9wKGV2bS5zdGFjaykKCiAgICAjIEdBUwogICAgZXh0ZW5kX21lbW9yeSA9IGNhbGN1bGF0ZV9nYXNfZXh0ZW5kX21lbW9yeSgKICAgICAgICBldm0ubWVtb3J5LAogICAgICAgIFsKICAgICAgICAgICAgKG1lbW9yeV9pbnB1dF9zdGFydF9wb3NpdGlvbiwgbWVtb3J5X2lucHV0X3NpemUpLAogICAgICAgICAgICAobWVtb3J5X291dHB1dF9zdGFydF9wb3NpdGlvbiwgbWVtb3J5X291dHB1dF9zaXplKSwKICAgICAgICBdLAogICAgKQoKICAgIGlmIHRvIGluIGV2bS5hY2Nlc3NlZF9hZGRyZXNzZXM6CiAgICAgICAgYWNjZXNzX2dhc19jb3N0ID0gR0FTX1dBUk1fQUNDRVNTCiAgICBlbHNlOgogICAgICAgIGV2bS5hY2Nlc3NlZF9hZGRyZXNzZXMuYWRkKHRvKQogICAgICAgIGFjY2Vzc19nYXNfY29zdCA9IEdBU19DT0xEX0FDQ09VTlRfQUNDRVNTCgogICAgbWVzc2FnZV9jYWxsX2dhcyA9IGNhbGN1bGF0ZV9tZXNzYWdlX2NhbGxfZ2FzKAogICAgICAgIFUyNTYoMCksCiAgICAgICAgZ2FzLAogICAgICAgIFVpbnQoZXZtLmdhc19sZWZ0KSwKICAgICAgICBleHRlbmRfbWVtb3J5LmNvc3QsCiAgICAgICAgYWNjZXNzX2dhc19jb3N0LAogICAgKQogICAgY2hhcmdlX2dhcyhldm0sIG1lc3NhZ2VfY2FsbF9nYXMuY29zdCArIGV4dGVuZF9tZW1vcnkuY29zdCkKCiAgICAjIE9QRVJBVElPTgogICAgZXZtLm1lbW9yeSArPSBiIlx4MDAiICogZXh0ZW5kX21lbW9yeS5leHBhbmRfYnkKICAgIGdlbmVyaWNfY2FsbCgKICAgICAgICBldm0sCiAgICAgICAgbWVzc2FnZV9jYWxsX2dhcy5zdGlwZW5kLAogICAgICAgIFUyNTYoMCksCiAgICAgICAgZXZtLm1lc3NhZ2UuY3VycmVudF90YXJnZXQsCiAgICAgICAgdG8sCiAgICAgICAgdG8sCiAgICAgICAgVHJ1ZSwKICAgICAgICBUcnVlLAogICAgICAgIG1lbW9yeV9pbnB1dF9zdGFydF9wb3NpdGlvbiwKICAgICAgICBtZW1vcnlfaW5wdXRfc2l6ZSwKICAgICAgICBtZW1vcnlfb3V0cHV0X3N0YXJ0X3Bvc2l0aW9uLAogICAgICAgIG1lbW9yeV9vdXRwdXRfc2l6ZSwKICAgICkKCiAgICAjIFBST0dSQU0gQ09VTlRFUgogICAgZXZtLnBjICs9IDEKlGgHXZRoP1hGBQAAZGVmIHN0YXRpY2NhbGwoZXZtOiBFdm0pIC0+IE5vbmU6CiAgICAjIFNUQUNLCiAgICBnYXMgPSBVaW50KHBvcChldm0uc3RhY2spKQogICAgdG8gPSB0b19hZGRyZXNzKHBvcChldm0uc3RhY2spKQogICAgbWVtb3J5X2lucHV0X3N0YXJ0X3Bvc2l0aW9uID0gcG9wKGV2bS5zdGFjaykKICAgIG1lbW9yeV9pbnB1dF9zaXplID0gcG9wKGV2bS5zdGFjaykKICAgIG1lbW9yeV9vdXRwdXRfc3RhcnRfcG9zaXRpb24gPSBwb3AoZXZtLnN0YWNrKQogICAgbWVtb3J5X291dHB1dF9zaXplID0gcG9wKGV2bS5zdGFjaykKCiAgICAjIEdBUwogICAgZXh0ZW5kX21lbW9yeSA9IGNhbGN1bGF0ZV9nYXNfZXh0ZW5kX21lbW9yeSgKICAgICAgICBldm0ubWVtb3J5LAogICAgICAgIFsKICAgICAgICAgICAgKG1lbW9yeV9pbnB1dF9zdGFydF9wb3NpdGlvbiwgbWVtb3J5X2lucHV0X3NpemUpLAogICAgICAgICAgICAobWVtb3J5X291dHB1dF9zdGFydF9wb3NpdGlvbiwgbWVtb3J5X291dHB1dF9zaXplKSwKICAgICAgICBdLAogICAgKQoKICAgIGlmIHRvIGluIGV2bS5hY2Nlc3NlZF9hZGRyZXNzZXM6CiAgICAgICAgYWNjZXNzX2dhc19jb3N0ID0gR0FTX1dBUk1fQUNDRVNTCiAgICBlbHNlOgogICAgICAgIGV2bS5hY2Nlc3NlZF9hZGRyZXNzZXMuYWRkKHRvKQogICAgICAgIGFjY2Vzc19nYXNfY29zdCA9IEdBU19DT0xEX0FDQ09VTlRfQUNDRVNTCgogICAgbWVzc2FnZV9jYWxsX2dhcyA9IGNhbGN1bGF0ZV9tZXNzYWdlX2NhbGxfZ2FzKAogICAgICAgIFUyNTYoMCksCiAgICAgICAgZ2FzLAogICAgICAgIFVpbnQoZXZtLmdhc19sZWZ0KSwKICAgICAgICBleHRlbmRfbWVtb3J5LmNvc3QsCiAgICAgICAgYWNjZXNzX2dhc19jb3N0LAogICAgKQogICAgY2hhcmdlX2dhcyhldm0sIG1lc3NhZ2VfY2FsbF9nYXMuY29zdCArIGV4dGVuZF9tZW1vcnkuY29zdCkKCiAgICAjIE9QRVJBVElPTgogICAgZXZtLm1lbW9yeSArPSBiIlx4MDAiICogZXh0ZW5kX21lbW9yeS5leHBhbmRfYnkKICAgIGdl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bmU6CiAgICAjIFNUQUNLCiAgICBtZW1vcnlfc3RhcnRfaW5kZXggPSBwb3AoZXZtLnN0YWNrKQogICAgc2l6ZSA9IHBvcChldm0uc3RhY2spCgogICAgIyBHQVMKICAgIGV4dGVuZF9tZW1vcnkgPSBjYWxjdWxhdGVfZ2FzX2V4dGVuZF9tZW1vcnkoCiAgICAgICAgZXZtLm1lbW9yeSwgWyhtZW1vcnlfc3RhcnRfaW5kZXgsIHNpemUpXQogICAgKQoKICAgIGNoYXJnZV9nYXMoZXZtLCBleHRlbmRfbWVtb3J5LmNvc3QpCgogICAgIyBPUEVSQVRJT04KICAgIGV2bS5tZW1vcnkgKz0gYiJceDAwIiAqIGV4dGVuZF9tZW1vcnkuZXhwYW5kX2J5CiAgICBvdXRwdXQgPSBtZW1vcnlfcmVhZF9ieXRlcyhldm0ubWVtb3J5LCBtZW1vcnlfc3RhcnRfaW5kZXgsIHNpemUpCiAgICBldm0ub3V0cHV0ID0gYnl0ZXMob3V0cHV0KQogICAgcmFpc2UgUmV2ZXJ0CgogICAgIyBQUk9HUkFNIENPVU5URVIKICAgIHBhc3MKlIWUgZR9lChoBWgGaCBq5RIAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMBnNvdXJjZZSMXi9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3Mvc3JjL2V0aGVyZXVtL3BhcmlzL3ZtL2luc3RydWN0aW9ucy9zeXN0ZW0ucHmUjAl4bWw6c3BhY2WUarQCAACMBWZvcmNllImMCGxhbmd1YWdllIwGcHl0aG9ulIwOaGlnaGxpZ2h0X2FyZ3OUfZRqlwgAAEsBc4wHbGluZW5vc5SJdWgcaikIAABoHWgeaB9L7mggamMSAAB1YmVoDn2UKGgQXZRqYAIAAGFoE12UaBVdlIwGcmV2ZXJ0lGFoF12UaBldlHVoHGgzaB1oHmgfS+FoIGrzBgAAaCFoA3ViZWgOfZQoaBBdlGjtYWgTXZRoFV2UjA5tb2R1bGUgZGV0YWlsc5RhaBddlGgZXZR1aBxoM2gdaB5oH0sraCBoNWghaAN1YmVoDn2UKGgQXZSMMGV0aGVyZXVtLXZpcnR1YWwtbWFjaGluZS1ldm0tc3lzdGVtLWluc3RydWN0aW9uc5RhaBNdlGgVXZSMMmV0aGVyZXVtIHZpcnR1YWwgbWFjaGluZSAoZXZtKSBzeXN0ZW0gaW5zdHJ1Y3Rpb25zlGFoF12UaBldlHVoHGgzaB1oHmgfSwRoIGgDaCFoA3ViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMBnNvdXJjZZRoRHVoHGgBjA5jdXJyZW50X3NvdXJjZZRoRIwMY3VycmVudF9saW5llEsAjAhzZXR0aW5nc5SMEWRvY3V0aWxzLmZyb250ZW5klIwGVmFsdWVzlJOUKYGUfZQojAxyZXBvcnRfbGV2ZWyUSwKMCmhhbHRfbGV2ZWyUSwSMEWV4aXRfc3RhdHVzX2xldmVslEsFjAVkZWJ1Z5ROjA53YXJuaW5nX3N0cmVhbZROjAl0cmFjZWJhY2uUTowPb3V0cHV0X2VuY29kaW5nlIwFdXRmLTiUjB1vdXRwdXRfZW5jb2RpbmdfZXJyb3JfaGFuZGxlcpSMEXhtbGNoYXJyZWZyZXBsYWNllIwOZXJyb3JfZW5jb2RpbmeUjAV1dGYtOJSMHGVycm9yX2VuY29kaW5nX2Vycm9yX2hhbmRsZXKUjBBiYWNrc2xhc2hyZXBsYWNllIwTcmVjb3JkX2RlcGVuZGVuY2llc5SMDmRvY3V0aWxzLnV0aWxzlIwORGVwZW5kZW5jeUxpc3SUk5QpgZR9lCiMBGxpc3SUXZSMBGZpbGWUTnVijAZjb25maWeUTowNZHVtcF9zZXR0aW5nc5ROjA5kdW1wX2ludGVybmFsc5ROjA9kdW1wX3RyYW5zZm9ybXOUTowPZHVtcF9wc2V1ZG9feG1slE6MEGV4cG9zZV9pbnRlcm5hbHOUTowOc3RyaWN0X3Zpc2l0b3KUTowPX2Rpc2FibGVfY29uZmlnlE6MB19zb3VyY2WUTowMX2Rlc3RpbmF0aW9ulIw+ZG9jL2RpZmZzL3BhcmlzX3NoYW5naGFpL3ZtL2luc3RydWN0aW9ucy9zeXN0ZW0vaW5kZXgucGlja2xlNjSUjA1fY29uZmlnX2ZpbGVzlF2UjBFsaW5lX2xlbmd0aF9saW1pdJRNECeMCXRhYl93aWR0aJRLCIwQc3ludGF4X2hpZ2hsaWdodJSMBGxvbmeUjAxzbWFydF9xdW90ZXOUiYwTc21hcnRxdW90ZXNfbG9jYWxlc5ROjB1jaGFyYWN0ZXJfbGV2ZWxfaW5saW5lX21hcmt1cJSJjAZ3cml0ZXKUjAN4bWyUjBljb21wYXJlX3NlY3Rpb25zX2J5X25hbWVzlEsBjAxkdW1wX3JzdGRpZmaUTowFX2JvdGiUfZQoaDhOjAlnZW5lcmF0b3KUTowJZGF0ZXN0YW1wlE6MC3NvdXJjZV9saW5rlE6MCnNvdXJjZV91cmyUTowNdG9jX2JhY2tsaW5rc5RqHQMAAIwSZm9vdG5vdGVfYmFja2xpbmtzlEsBjA1zZWN0bnVtX3hmb3JtlEsBjA5kb2N0aXRsZV94Zm9ybZRLAYwNZG9jaW5mb194Zm9ybZRLAYwSc2VjdHN1YnRpdGxlX3hmb3JtlEsAjA5zdHJpcF9jb21tZW50c5ROjA5pbnB1dF9lbmNvZGluZ5ROjBxpbnB1dF9lbmNvZGluZ19lcnJvcl9oYW5kbGVylIwGc3RyaWN0lIwNbGFuZ3VhZ2VfY29kZZSMAmVulIwOcGVwX3JlZmVyZW5jZXOUTowMcGVwX2Jhc2VfdXJslIwfaHR0cDovL3d3dy5weXRob24ub3JnL2Rldi9wZXBzL5SMFXBlcF9maWxlX3VybF90ZW1wbGF0ZZSMCHBlcC0lMDRklIwOcmZjX3JlZmVyZW5jZXOUTowMcmZjX2Jhc2VfdXJslIwbaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvlIwddHJpbV9mb290bm90ZV9yZWZlcmVuY2Vfc3BhY2WUTowWZmlsZV9pbnNlcnRpb25fZW5hYmxlZJRLAYwLcmF3X2VuYWJsZWSUSwGMDmF1dG9faWRfcHJlZml4lIwCaWSUjAlpZF9wcmVmaXiUaAaMG3N0cmlwX2VsZW1lbnRzX3dpdGhfY2xhc3Nlc5ROjA1zdHJpcF9jbGFzc2VzlE51jARib3RolH2UjApfb3B0aW9uc1RvlIwFX2JvdGiUjAtfb2xkX3NvdXJjZZSMTy9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3MvLnRveC9kb2NzL3N0YWdlMF9vdXQvYXV0b2FwaS+UjAtfbmV3X3NvdXJjZZSMCWRvYy9kaWZmc5RqYBMAAGphEwAAjBZpZ25vcmVfaW5fc2VjdGlvbl9uYW1llF2UKIwFcGFyaXOUjAhzaGFuZ2hhaZRldWKMCHJlcG9ydGVylE6MEGluZGlyZWN0X3RhcmdldHOUXZSMEXN1YnN0aXR1dGlvbl9kZWZzlH2UjBJzdWJzdGl0dXRpb25fbmFtZXOUfZSMCHJlZm5hbWVzlH2UjAZyZWZpZHOUfZSMB25hbWVpZHOUfZSMCW5hbWV0eXBlc5R9lGgQfZSMDWZvb3Rub3RlX3JlZnOUfZSMDWNpdGF0aW9uX3JlZnOUfZSMDWF1dG9mb290bm90ZXOUXZSMEWF1dG9mb290bm90ZV9yZWZzlF2UjBBzeW1ib2xfZm9vdG5vdGVzlF2UjBRzeW1ib2xfZm9vdG5vdGVfcmVmc5RdlIwJZm9vdG5vdGVzlF2UjAljaXRhdGlvbnOUXZSMEmF1dG9mb290bm90ZV9zdGFydJRLAYwVc3ltYm9sX2Zvb3Rub3RlX3N0YXJ0lEsAjAppZF9jb3VudGVylIwLY29sbGVjdGlvbnOUjAdDb3VudGVylJOUfZSFlFKUjA5wYXJzZV9tZXNzYWdlc5RdlIwSdHJhbnNmb3JtX21lc3NhZ2VzlF2UjAt0cmFuc2Zvcm1lcpROjAtpbmNsdWRlX2xvZ5RdlIwKZGVjb3JhdGlvbpROaCFoA3ViLg==